{
    "name": "mbap",
    "displayName": "M&B: Warband API",
    "description": "Mount & Blade: Warband language support for Microsoft Visual Studio Code by Azremen and Sart",
    "publisher": "Azremen",
    "version": "0.1.17",
    "homepage": "https://github.com/Azremen/MB-Warband-API-VSC/blob/main/README.md",
    "engines": {
        "vscode": "^1.62.0"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/Azremen/MB-Warband-API-VSC.git"
    },
    "categories": [
        "Programming Languages"
    ],
    "contributes": {
        "languages": [
            {
                "id": "warbandsl",
                "aliases": [
                    "Warband Script Language"
                ],
                "extensions": [
                    ".py"
                ]
            }
        ],
        "commands": [
            {
                "command": "mbap.formatWarbandScript",
                "title": "Format Warband Script Language Code"
            }
        ],
        "snippets": [
            {
                "language": "warbandsl",
                "path": "./snippets/mbap.code-snippets"
            }
        ],
        "keybindings": [
            {
                "command": "mbap.formatWarbandScript",
                "key": "ctrl+shift+f",
                "when": "editorTextFocus && resourceLangId == warbandsl"
            }
        ]
    },
    "configuration": {
        "title": "Warband Script Language Formatter",
        "properties": {
            "format.indentation": {
                "type": "string",
                "enum": [
                    "tabs",
                    "spaces"
                ],
                "default": "spaces",
                "description": "Indentation style for Warband Script Language Formatter."
            },
            "format.tabSize": {
                "type": "number",
                "default": 4,
                "description": "Number of spaces or tabs to use for indentation."
            },
            "patterns": [
                {
                    "include": "#keywords"
                },
                {
                    "include": "#strings"
                }
            ],
            "comments": {
                "lineComment": "\"",
                "blockComment": [ "\"\"\"", "\"\"\"" ]
            },
            "brackets": [
                ["{", "}"],
                ["[", "]"],
                ["(", ")"]
            ],
            "autoClosingPairs": [
                ["{", "}"],
                ["[", "]"],
                ["(", ")"],
                ["\"", "\""],
                ["'", "'"]
            ],
            "surroundingPairs": [
                ["{", "}"],
                ["[", "]"],
                ["(", ")"],
                ["\"", "\""],
                ["'", "'"]
            ],
            "repository": {
                "keywords": {
                    "patterns": [
                        {
                            "match": "\\b(if|while|for|return|import|from|def|try|except)\\b",
                            "name": "keyword.mbap",
                            "comment": "Python keywords"
                        },
                        {
                            "match": "(\\)\\s*#)|[^]](\\)\\s*$)|(\\),?\\s*[^#(]\\w+)|(]\\s+\\[)",
                            "name": "source.mbap",
                            "captures": {
                                "1": {
                                    "name": "invalid.illegal.unclosed-string.mbap"
                                },
                                "2": {
                                    "name": "invalid.illegal.unclosed-string.mbap"
                                },
                                "3": {
                                    "name": "invalid.illegal.unclosed-string.mbap"
                                },
                                "4": {
                                    "name": "invalid.illegal.unclosed-string.mbap"
                                }
                            },
                            "comment": "incorrect finish without comma"
                        },
                        {
                            "match": "\\(((?:\\w+\\|){0,2}\\w+)",
                            "name": "source.mbap",
                            "captures": {
                                "1": {
                                    "name": "constant.numeric.source.mbap"
                                }
                            },
                            "comment": "Keywords: (assign, '$g_var', 1), => assign or (this_or_next|eq,.. => this_or_next|eq"
                        },
                        {
                            "match": "\\$[A-Za-z][A-Za-z0-9_]+|\\{?reg\\d+\\}?|s\\d+|pos\\d+",
                            "name": "support.variable.mbap",
                            "comment": "Global vars: $g_var, reg1 or {reg1}, s2, pos3"
                        },
                        {
                            "match": "\u0022\\:[\\w]+\u0022",
                            "name": "variable.other.mbap",
                            "comment": ":Local_vars"
                        },
                        {
                            "match": "\\#.+",
                            "name": "string.source.mbap",
                            "comment": "# Comments"
                        },
                        {
                            "match": "\u0022\\@[\\w\\t !#$%&'()*+,./:;<=>?\\[\\\\\\]\\`\\{\\|\\}\\~\\^\\-]+?\u0022",
                            "name": "storage.type.method.mbap",
                            "comment": "@ Strings"
                        }
                    ]
                },
                "strings": {
                    "name": "string.quoted.double.python",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.python",
                            "match": "\\\\."
                        }
                    ]
                }
            }
        }
    },
    "scripts": {
        "test": "echo \"No tests specified\"",
        "format": "node format-script.js"
    },
    "dependencies": {
        "acorn": "^8.0.1",
        "escodegen": "^2.0.0"
    }
}