{
    "add_companion_party": {
        "body": "(add_companion_party,troop_id_hero),",
        "prefix": "add_companion_party",
        "scope": "python"
    },

    "add_faction_note_from_dialog": {
        "body": "(add_faction_note_from_dialog,faction_id,note_slot_no,value),",
        "prefix": "add_faction_note_from_dialog",
        "scope": "python"
    },

    "add_faction_note_from_sreg": {
        "body": "(add_faction_note_from_sreg,faction_id,note_slot_no,str_id,value),",
        "prefix": "add_faction_note_from_sreg",
        "scope": "python"
    },

    "add_faction_note_tableau_mesh": {
        "body": "(add_faction_note_tableau_mesh,faction_id,tableau_material_id),",
        "prefix": "add_faction_note_tableau_mesh",
        "scope": "python"
    },

    "add_gold_as_xp": {
        "body": "(add_gold_as_xp,value,troop_id),",
        "prefix": "add_gold_as_xp",
        "scope": "python"
    },

    "add_gold_to_party": {
        "body": "(add_gold_to_party,value,party_id),",
        "prefix": "add_gold_to_party",
        "scope": "python"
    },

    "add_info_page_note_from_dialog": {
        "body": "(add_info_page_note_from_dialog,info_page_id,note_slot_no,value),",
        "prefix": "add_info_page_note_from_dialog",
        "scope": "python"
    },

    "add_info_page_note_from_sreg": {
        "body": "(add_info_page_note_from_sreg,info_page_id,note_slot_no,str_id,value),",
        "prefix": "add_info_page_note_from_sreg",
        "scope": "python"
    },

    "add_info_page_note_tableau_mesh": {
        "body": "(add_info_page_note_tableau_mesh,info_page_id,tableau_material_id),",
        "prefix": "add_info_page_note_tableau_mesh",
        "scope": "python"
    },

    "add_missile": {
        "body": "(add_missile,agent_id,starting_position,starting_speed_fixed_point,weapon_item_id,weapon_item_modifier,6missile_item_id,7missile_item_modifier),8",
        "prefix": "add_missile",
        "scope": "python"
    },

    "add_party_note_from_dialog": {
        "body": "(add_party_note_from_dialog,party_id,note_slot_no,value),",
        "prefix": "add_party_note_from_dialog",
        "scope": "python"
    },

    "add_party_note_from_sreg": {
        "body": "(add_party_note_from_sreg,party_id,note_slot_no,str_id,value),",
        "prefix": "add_party_note_from_sreg",
        "scope": "python"
    },

    "add_party_note_tableau_mesh": {
        "body": "(add_party_note_tableau_mesh,party_id,tableau_material_id),",
        "prefix": "add_party_note_tableau_mesh",
        "scope": "python"
    },

    "add_point_light": {
        "body": "(add_point_light,[flicker_magnitude],[flicker_interval]),",
        "prefix": "add_point_light",
        "scope": "python"
    },

    "add_point_light_to_entity": {
        "body": "(add_point_light_to_entity,[flicker_magnitude],[flicker_interval]),",
        "prefix": "add_point_light_to_entity",
        "scope": "python"
    },

    "add_quest_note_from_dialog": {
        "body": "(add_quest_note_from_dialog,quest_id,note_slot_no,value),",
        "prefix": "add_quest_note_from_dialog",
        "scope": "python"
    },

    "add_quest_note_from_sreg": {
        "body": "(add_quest_note_from_sreg,quest_id,note_slot_no,str_id,value),",
        "prefix": "add_quest_note_from_sreg",
        "scope": "python"
    },

    "add_quest_note_tableau_mesh": {
        "body": "(add_quest_note_tableau_mesh,quest_id,tableau_material_id),",
        "prefix": "add_quest_note_tableau_mesh",
        "scope": "python"
    },

    "add_reinforcements_to_entry": {
        "body": "(add_reinforcements_to_entry,entry_no,value),",
        "prefix": "add_reinforcements_to_entry",
        "scope": "python"
    },

    "add_troop_note_from_dialog": {
        "body": "(add_troop_note_from_dialog,troop_id,note_slot_no,value),",
        "prefix": "add_troop_note_from_dialog",
        "scope": "python"
    },

    "add_troop_note_from_sreg": {
        "body": "(add_troop_note_from_sreg,troop_id,note_slot_no,str_id,value),",
        "prefix": "add_troop_note_from_sreg",
        "scope": "python"
    },

    "add_troop_note_tableau_mesh": {
        "body": "(add_troop_note_tableau_mesh,troop_id,tableau_material_id),",
        "prefix": "add_troop_note_tableau_mesh",
        "scope": "python"
    },

    "add_troop_to_site": {
        "body": "(add_troop_to_site,trp_id,scene_id,entry_no),",
        "prefix": "add_troop_to_site",
        "scope": "python"
    },

    "add_visitors_to_current_scene": {
        "body": "(add_visitors_to_current_scene,entry_no,trp_id,number_of_troops,team_no,group_no),6",
        "prefix": "add_visitors_to_current_scene",
        "scope": "python"
    },

    "add_xp_as_reward": {
        "body": "(add_xp_as_reward,value),",
        "prefix": "add_xp_as_reward",
        "scope": "python"
    },

    "add_xp_to_troop": {
        "body": "(add_xp_to_troop,value,troop_id),",
        "prefix": "add_xp_to_troop",
        "scope": "python"
    },

    "agent_add_offer_with_timeout": {
        "body": "(agent_add_offer_with_timeout,agent_id,offerer_agent_id,duration-in-/000-seconds),",
        "prefix": "agent_add_offer_with_timeout",
        "scope": "python"
    },

    "agent_add_relation_with_agent": {
        "body": "(agent_add_relation_with_agent,agent_id_,agent_id_,value),",
        "prefix": "agent_add_relation_with_agent",
        "scope": "python"
    },

    "agent_ai_get_behavior_target": {
        "body": "(agent_ai_get_behavior_target,destination,agent_id),",
        "prefix": "agent_ai_get_behavior_target",
        "scope": "python"
    },

    "agent_ai_get_cached_enemy": {
        "body": "(agent_ai_get_cached_enemy,destination,agent_no,cache_index),",
        "prefix": "agent_ai_get_cached_enemy",
        "scope": "python"
    },

    "agent_ai_get_look_target": {
        "body": "(agent_ai_get_look_target,destination,agent_id),",
        "prefix": "agent_ai_get_look_target",
        "scope": "python"
    },

    "agent_ai_get_move_target": {
        "body": "(agent_ai_get_move_target,destination,agent_id),",
        "prefix": "agent_ai_get_move_target",
        "scope": "python"
    },

    "agent_ai_get_num_cached_enemies": {
        "body": "(agent_ai_get_num_cached_enemies,destination,agent_no),",
        "prefix": "agent_ai_get_num_cached_enemies",
        "scope": "python"
    },

    "agent_ai_set_aggressiveness": {
        "body": "(agent_ai_set_aggressiveness,agent_id,value),",
        "prefix": "agent_ai_set_aggressiveness",
        "scope": "python"
    },

    "agent_ai_set_always_attack_in_melee": {
        "body": "(agent_ai_set_always_attack_in_melee,agent_id,value),",
        "prefix": "agent_ai_set_always_attack_in_melee",
        "scope": "python"
    },

    "agent_ai_set_can_crouch": {
        "body": "(agent_ai_set_can_crouch,agent_id,value0-),",
        "prefix": "agent_ai_set_can_crouch",
        "scope": "python"
    },

    "agent_check_offer_from_agent": {
        "body": "(agent_check_offer_from_agent,agent_id,offerer_agent_id),",
        "prefix": "agent_check_offer_from_agent",
        "scope": "python"
    },

    "agent_clear_relations_with_agents": {
        "body": "(agent_clear_relations_with_agents,agent_id),",
        "prefix": "agent_clear_relations_with_agents",
        "scope": "python"
    },

    "agent_clear_scripted_mode": {
        "body": "(agent_clear_scripted_mode,agent_id),",
        "prefix": "agent_clear_scripted_mode",
        "scope": "python"
    },

    "agent_deliver_damage_to_agent": {
        "body": "(agent_deliver_damage_to_agent,agent_id_deliverer,agent_id,value,[item_id]),",
        "prefix": "agent_deliver_damage_to_agent",
        "scope": "python"
    },

    "agent_deliver_damage_to_agent_advanced": {
        "body": "(agent_deliver_damage_to_agent_advanced,destination,agent_id_deliverer,agent_id,value,[item_id]),6",
        "prefix": "agent_deliver_damage_to_agent_advanced",
        "scope": "python"
    },

    "agent_equip_item": {
        "body": "(agent_equip_item,agent_id,itm_id,[weapon_slot_no]),",
        "prefix": "agent_equip_item",
        "scope": "python"
    },

    "agent_fade_out": {
        "body": "(agent_fade_out,agent_id),",
        "prefix": "agent_fade_out",
        "scope": "python"
    },

    "agent_force_rethink": {
        "body": "(agent_force_rethink,agent_id),",
        "prefix": "agent_force_rethink",
        "scope": "python"
    },

    "agent_get_action_dir": {
        "body": "(agent_get_action_dir,destination,agent_id),",
        "prefix": "agent_get_action_dir",
        "scope": "python"
    },

    "agent_get_ammo": {
        "body": "(agent_get_ammo,destination,agent_id,value),",
        "prefix": "agent_get_ammo",
        "scope": "python"
    },

    "agent_get_ammo_for_slot": {
        "body": "(agent_get_ammo_for_slot,destination,agent_id,slot_no0-),",
        "prefix": "agent_get_ammo_for_slot",
        "scope": "python"
    },

    "agent_get_animation": {
        "body": "(agent_get_animation,destination,agent_id,body_part0-),",
        "prefix": "agent_get_animation",
        "scope": "python"
    },

    "agent_get_attached_scene_prop": {
        "body": "(agent_get_attached_scene_prop,destination,agent_id),",
        "prefix": "agent_get_attached_scene_prop",
        "scope": "python"
    },

    "agent_get_attack_action": {
        "body": "(agent_get_attack_action,destination,agent_id),",
        "prefix": "agent_get_attack_action",
        "scope": "python"
    },

    "agent_get_class": {
        "body": "(agent_get_class,destination,agent_id),",
        "prefix": "agent_get_class",
        "scope": "python"
    },

    "agent_get_combat_state": {
        "body": "(agent_get_combat_state,destination,agent_id),",
        "prefix": "agent_get_combat_state",
        "scope": "python"
    },

    "agent_get_crouch_mode": {
        "body": "(agent_get_crouch_mode,destination,agent_id),",
        "prefix": "agent_get_crouch_mode",
        "scope": "python"
    },

    "agent_get_defend_action": {
        "body": "(agent_get_defend_action,destination,agent_id),",
        "prefix": "agent_get_defend_action",
        "scope": "python"
    },

    "agent_get_division": {
        "body": "(agent_get_division,destination,agent_id),",
        "prefix": "agent_get_division",
        "scope": "python"
    },

    "agent_get_entry_no": {
        "body": "(agent_get_entry_no,destination,agent_id),",
        "prefix": "agent_get_entry_no",
        "scope": "python"
    },

    "agent_get_group": {
        "body": "(agent_get_group,destination,agent_id),",
        "prefix": "agent_get_group",
        "scope": "python"
    },

    "agent_get_horse": {
        "body": "(agent_get_horse,destination,agent_id),",
        "prefix": "agent_get_horse",
        "scope": "python"
    },

    "agent_get_item_cur_ammo": {
        "body": "(agent_get_item_cur_ammo,destination,agent_id,slot_no),",
        "prefix": "agent_get_item_cur_ammo",
        "scope": "python"
    },

    "agent_get_item_id": {
        "body": "(agent_get_item_id,destination,agent_id),",
        "prefix": "agent_get_item_id",
        "scope": "python"
    },

    "agent_get_item_slot": {
        "body": "(agent_get_item_slot,destination,agent_id,value0-7),",
        "prefix": "agent_get_item_slot",
        "scope": "python"
    },

    "agent_get_kill_count": {
        "body": "(agent_get_kill_count,destination,agent_id,[get_wounded0-]),",
        "prefix": "agent_get_kill_count",
        "scope": "python"
    },

    "agent_get_look_position": {
        "body": "(agent_get_look_position,pos,agent_id),",
        "prefix": "agent_get_look_position",
        "scope": "python"
    },

    "agent_get_number_of_enemies_following": {
        "body": "(agent_get_number_of_enemies_following,destination,agent_id),",
        "prefix": "agent_get_number_of_enemies_following",
        "scope": "python"
    },

    "agent_get_party_id": {
        "body": "(agent_get_party_id,destination,agent_id),",
        "prefix": "agent_get_party_id",
        "scope": "python"
    },

    "agent_get_player_id": {
        "body": "(agent_get_player_id,destination,agent_id),",
        "prefix": "agent_get_player_id",
        "scope": "python"
    },

    "agent_get_position": {
        "body": "(agent_get_position,pos,agent_id),",
        "prefix": "agent_get_position",
        "scope": "python"
    },

    "agent_get_rider": {
        "body": "(agent_get_rider,destination,agent_id),",
        "prefix": "agent_get_rider",
        "scope": "python"
    },

    "agent_get_scripted_destination": {
        "body": "(agent_get_scripted_destination,pos,agent_id),",
        "prefix": "agent_get_scripted_destination",
        "scope": "python"
    },

    "agent_get_simple_behavior": {
        "body": "(agent_get_simple_behavior,destination,agent_id),",
        "prefix": "agent_get_simple_behavior",
        "scope": "python"
    },

    "agent_get_slot": {
        "body": "(agent_get_slot,destination,agent_id,slot_no),",
        "prefix": "agent_get_slot",
        "scope": "python"
    },

    "agent_get_speed": {
        "body": "(agent_get_speed,pos,agent_id),",
        "prefix": "agent_get_speed",
        "scope": "python"
    },

    "agent_get_team": {
        "body": "(agent_get_team,destination,agent_id),",
        "prefix": "agent_get_team",
        "scope": "python"
    },

    "agent_get_time_elapsed_since_removed": {
        "body": "(agent_get_time_elapsed_since_removed,destination,agent_id),",
        "prefix": "agent_get_time_elapsed_since_removed",
        "scope": "python"
    },

    "agent_get_troop_id": {
        "body": "(agent_get_troop_id,destination,agent_id),",
        "prefix": "agent_get_troop_id",
        "scope": "python"
    },

    "agent_get_wielded_item": {
        "body": "(agent_get_wielded_item,destination,agent_id,hand_no),",
        "prefix": "agent_get_wielded_item",
        "scope": "python"
    },

    "agent_has_item_equipped": {
        "body": "(agent_has_item_equipped,agent_id,itm_id),",
        "prefix": "agent_has_item_equipped",
        "scope": "python"
    },

    "agent_is_active": {
        "body": "(agent_is_active,agent_id),",
        "prefix": "agent_is_active",
        "scope": "python"
    },

    "agent_is_alarmed": {
        "body": "(agent_is_alarmed,agent_id),",
        "prefix": "agent_is_alarmed",
        "scope": "python"
    },

    "agent_is_alive": {
        "body": "(agent_is_alive,agent_id),",
        "prefix": "agent_is_alive",
        "scope": "python"
    },

    "agent_is_ally": {
        "body": "(agent_is_ally,agent_id),",
        "prefix": "agent_is_ally",
        "scope": "python"
    },

    "agent_is_defender": {
        "body": "(agent_is_defender,agent_id),",
        "prefix": "agent_is_defender",
        "scope": "python"
    },

    "agent_is_human": {
        "body": "(agent_is_human,agent_id),",
        "prefix": "agent_is_human",
        "scope": "python"
    },

    "agent_is_in_line_of_sight": {
        "body": "(agent_is_in_line_of_sight,agent_id,pos),",
        "prefix": "agent_is_in_line_of_sight",
        "scope": "python"
    },

    "agent_is_in_parried_animation": {
        "body": "(agent_is_in_parried_animation,agent_id),",
        "prefix": "agent_is_in_parried_animation",
        "scope": "python"
    },

    "agent_is_in_special_mode": {
        "body": "(agent_is_in_special_mode,agent_id),",
        "prefix": "agent_is_in_special_mode",
        "scope": "python"
    },

    "agent_is_non_player": {
        "body": "(agent_is_non_player,agent_id),",
        "prefix": "agent_is_non_player",
        "scope": "python"
    },

    "agent_is_routed": {
        "body": "(agent_is_routed,agent_id),",
        "prefix": "agent_is_routed",
        "scope": "python"
    },

    "agent_is_wounded": {
        "body": "(agent_is_wounded,agent_id),",
        "prefix": "agent_is_wounded",
        "scope": "python"
    },

    "agent_play_sound": {
        "body": "(agent_play_sound,agent_id,snd_id),",
        "prefix": "agent_play_sound",
        "scope": "python"
    },

    "agent_refill_ammo": {
        "body": "(agent_refill_ammo,agent_id),",
        "prefix": "agent_refill_ammo",
        "scope": "python"
    },

    "agent_refill_wielded_shield_hit_points": {
        "body": "(agent_refill_wielded_shield_hit_points,agent_id),",
        "prefix": "agent_refill_wielded_shield_hit_points",
        "scope": "python"
    },

    "agent_set_accuracy_modifier": {
        "body": "(agent_set_accuracy_modifier,agent_id,value),",
        "prefix": "agent_set_accuracy_modifier",
        "scope": "python"
    },

    "agent_set_ammo": {
        "body": "(agent_set_ammo,agent_id,itm_id,value),",
        "prefix": "agent_set_ammo",
        "scope": "python"
    },

    "agent_set_animation": {
        "body": "(agent_set_animation,agent_id,anim_id,[channel_no]),",
        "prefix": "agent_set_animation",
        "scope": "python"
    },

    "agent_set_animation_progress": {
        "body": "(agent_set_animation_progress,agent_id,value_fixed_point),",
        "prefix": "agent_set_animation_progress",
        "scope": "python"
    },

    "agent_set_attached_scene_prop": {
        "body": "(agent_set_attached_scene_prop,agent_id,spr_id),",
        "prefix": "agent_set_attached_scene_prop",
        "scope": "python"
    },

    "agent_set_attached_scene_prop_x": {
        "body": "(agent_set_attached_scene_prop_x,agent_id,value),",
        "prefix": "agent_set_attached_scene_prop_x",
        "scope": "python"
    },

    "agent_set_attached_scene_prop_y": {
        "body": "(agent_set_attached_scene_prop_y,agent_id,value),",
        "prefix": "agent_set_attached_scene_prop_y",
        "scope": "python"
    },

    "agent_set_attached_scene_prop_z": {
        "body": "(agent_set_attached_scene_prop_z,agent_id,value),",
        "prefix": "agent_set_attached_scene_prop_z",
        "scope": "python"
    },

    "agent_set_attack_action": {
        "body": "(agent_set_attack_action,agent_id,value_,value_),",
        "prefix": "agent_set_attack_action",
        "scope": "python"
    },

    "agent_set_crouch_mode": {
        "body": "(agent_set_crouch_mode,agent_id,value0-),",
        "prefix": "agent_set_crouch_mode",
        "scope": "python"
    },

    "agent_set_damage_modifier": {
        "body": "(agent_set_damage_modifier,agent_id,value),",
        "prefix": "agent_set_damage_modifier",
        "scope": "python"
    },

    "agent_set_defend_action": {
        "body": "(agent_set_defend_action,agent_id,value,duration-in-/000-seconds),",
        "prefix": "agent_set_defend_action",
        "scope": "python"
    },

    "agent_set_division": {
        "body": "(agent_set_division,agent_id,value),",
        "prefix": "agent_set_division",
        "scope": "python"
    },

    "agent_set_group": {
        "body": "(agent_set_group,agent_id,value),",
        "prefix": "agent_set_group",
        "scope": "python"
    },

    "agent_set_hit_points": {
        "body": "(agent_set_hit_points,agent_id,value,[absolute]),",
        "prefix": "agent_set_hit_points",
        "scope": "python"
    },

    "agent_set_horse_speed_factor": {
        "body": "(agent_set_horse_speed_factor,agent_id,speed_multiplier-in-/00),",
        "prefix": "agent_set_horse_speed_factor",
        "scope": "python"
    },

    "agent_set_invulnerable_shield": {
        "body": "(agent_set_invulnerable_shield,agent_id),",
        "prefix": "agent_set_invulnerable_shield",
        "scope": "python"
    },

    "agent_set_is_alarmed": {
        "body": "(agent_set_is_alarmed,agent_id,value/0),",
        "prefix": "agent_set_is_alarmed",
        "scope": "python"
    },

    "agent_set_kick_allowed": {
        "body": "(agent_set_kick_allowed,agent_id,value0-),",
        "prefix": "agent_set_kick_allowed",
        "scope": "python"
    },

    "agent_set_look_target_agent": {
        "body": "(agent_set_look_target_agent,agent_id,target_agent_id),",
        "prefix": "agent_set_look_target_agent",
        "scope": "python"
    },

    "agent_set_look_target_position": {
        "body": "(agent_set_look_target_position,agent_id,pos),",
        "prefix": "agent_set_look_target_position",
        "scope": "python"
    },

    "agent_set_max_hit_points": {
        "body": "(agent_set_max_hit_points,agent_id,value,[absolute]),",
        "prefix": "agent_set_max_hit_points",
        "scope": "python"
    },

    "agent_set_no_death_knock_down_only": {
        "body": "(agent_set_no_death_knock_down_only,agent_id,value0-),",
        "prefix": "agent_set_no_death_knock_down_only",
        "scope": "python"
    },

    "agent_set_no_dynamics": {
        "body": "(agent_set_no_dynamics,agent_id,value0-),",
        "prefix": "agent_set_no_dynamics",
        "scope": "python"
    },

    "agent_set_position": {
        "body": "(agent_set_position,agent_id,pos),",
        "prefix": "agent_set_position",
        "scope": "python"
    },

    "agent_set_ranged_damage_modifier": {
        "body": "(agent_set_ranged_damage_modifier,agent_id,value),",
        "prefix": "agent_set_ranged_damage_modifier",
        "scope": "python"
    },

    "agent_set_reload_speed_modifier": {
        "body": "(agent_set_reload_speed_modifier,agent_id,value),",
        "prefix": "agent_set_reload_speed_modifier",
        "scope": "python"
    },

    "agent_set_scripted_destination": {
        "body": "(agent_set_scripted_destination,agent_id,pos,auto_set_z_to_ground_level),",
        "prefix": "agent_set_scripted_destination",
        "scope": "python"
    },

    "agent_set_scripted_destination_no_attack": {
        "body": "(agent_set_scripted_destination_no_attack,agent_id,pos,auto_set_z_to_ground_level),",
        "prefix": "agent_set_scripted_destination_no_attack",
        "scope": "python"
    },

    "agent_set_slot": {
        "body": "(agent_set_slot,agent_id,slot_no,value),",
        "prefix": "agent_set_slot",
        "scope": "python"
    },

    "agent_set_speed_limit": {
        "body": "(agent_set_speed_limit,agent_id,speed_limit(kilometers/hour)),",
        "prefix": "agent_set_speed_limit",
        "scope": "python"
    },

    "agent_set_speed_modifier": {
        "body": "(agent_set_speed_modifier,agent_id,value),",
        "prefix": "agent_set_speed_modifier",
        "scope": "python"
    },

    "agent_set_stand_animation": {
        "body": "(agent_set_stand_animation,agent_id,anim_id),",
        "prefix": "agent_set_stand_animation",
        "scope": "python"
    },

    "agent_set_team": {
        "body": "(agent_set_team,agent_id,value),",
        "prefix": "agent_set_team",
        "scope": "python"
    },

    "agent_set_use_speed_modifier": {
        "body": "(agent_set_use_speed_modifier,agent_id,value),",
        "prefix": "agent_set_use_speed_modifier",
        "scope": "python"
    },

    "agent_set_visibility": {
        "body": "(agent_set_visibility,agent_id,value0-),",
        "prefix": "agent_set_visibility",
        "scope": "python"
    },

    "agent_set_walk_forward_animation": {
        "body": "(agent_set_walk_forward_animation,agent_id,anim_id),",
        "prefix": "agent_set_walk_forward_animation",
        "scope": "python"
    },

    "agent_set_wielded_item": {
        "body": "(agent_set_wielded_item,agent_id,itm_id),",
        "prefix": "agent_set_wielded_item",
        "scope": "python"
    },

    "agent_slot_eq": {
        "body": "(agent_slot_eq,agent_id,slot_no,value),",
        "prefix": "agent_slot_eq",
        "scope": "python"
    },

    "agent_slot_ge": {
        "body": "(agent_slot_ge,agent_id,slot_no,value),",
        "prefix": "agent_slot_ge",
        "scope": "python"
    },

    "agent_start_running_away": {
        "body": "(agent_start_running_away,agent_id,[pos]),",
        "prefix": "agent_start_running_away",
        "scope": "python"
    },

    "agent_stop_running_away": {
        "body": "(agent_stop_running_away,agent_id),",
        "prefix": "agent_stop_running_away",
        "scope": "python"
    },

    "agent_stop_sound": {
        "body": "(agent_stop_sound,agent_id),",
        "prefix": "agent_stop_sound",
        "scope": "python"
    },

    "agent_unequip_item": {
        "body": "(agent_unequip_item,agent_id,itm_id,[weapon_slot_no]),",
        "prefix": "agent_unequip_item",
        "scope": "python"
    },

    "ai_mesh_face_group_show_hide": {
        "body": "(ai_mesh_face_group_show_hide,group_no,value/0),",
        "prefix": "ai_mesh_face_group_show_hide",
        "scope": "python"
    },

    "all_enemies_defeated": {
        "body": "(all_enemies_defeated),",
        "prefix": "all_enemies_defeated",
        "scope": "python"
    },

    "assign": {
        "body": "(assign,destination,value),",
        "prefix": "assign",
        "scope": "python"
    },

    "auto_set_meta_mission_at_end_commited": {
        "body": "(auto_set_meta_mission_at_end_commited),",
        "prefix": "auto_set_meta_mission_at_end_commited",
        "scope": "python"
    },

    "ban_player": {
        "body": "(ban_player,player_id,value,admin_player_id),",
        "prefix": "ban_player",
        "scope": "python"
    },

    "ban_player_using_saved_ban_info": {
        "body": "(ban_player_using_saved_ban_info),",
        "prefix": "ban_player_using_saved_ban_info",
        "scope": "python"
    },

    "call_script": {
        "body": "(call_script,script_name),",
        "prefix": "call_script",
        "scope": "python"
    },

    "cancel_quest": {
        "body": "(cancel_quest,qst_id),",
        "prefix": "cancel_quest",
        "scope": "python"
    },

    "change_screen_buy_mercenaries": {
        "body": "(change_screen_buy_mercenaries),",
        "prefix": "change_screen_buy_mercenaries",
        "scope": "python"
    },

    "change_screen_controls": {
        "body": "(change_screen_controls),",
        "prefix": "change_screen_controls",
        "scope": "python"
    },

    "change_screen_equip_other": {
        "body": "(change_screen_equip_other,trp_id),",
        "prefix": "change_screen_equip_other",
        "scope": "python"
    },

    "change_screen_exchange_members": {
        "body": "(change_screen_exchange_members,[exchange_leader0-],[party_id]),",
        "prefix": "change_screen_exchange_members",
        "scope": "python"
    },

    "change_screen_exchange_with_party": {
        "body": "(change_screen_exchange_with_party,party_id),",
        "prefix": "change_screen_exchange_with_party",
        "scope": "python"
    },

    "change_screen_give_members": {
        "body": "(change_screen_give_members,[party_id]),",
        "prefix": "change_screen_give_members",
        "scope": "python"
    },

    "change_screen_loot": {
        "body": "(change_screen_loot,trp_id),",
        "prefix": "change_screen_loot",
        "scope": "python"
    },

    "change_screen_map": {
        "body": "(change_screen_map),",
        "prefix": "change_screen_map",
        "scope": "python"
    },

    "change_screen_map_conversation": {
        "body": "(change_screen_map_conversation,trp_id),",
        "prefix": "change_screen_map_conversation",
        "scope": "python"
    },

    "change_screen_mission": {
        "body": "(change_screen_mission),",
        "prefix": "change_screen_mission",
        "scope": "python"
    },

    "change_screen_notes": {
        "body": "(change_screen_notes,note_type-,object_id),",
        "prefix": "change_screen_notes",
        "scope": "python"
    },

    "change_screen_options": {
        "body": "(change_screen_options),",
        "prefix": "change_screen_options",
        "scope": "python"
    },

    "change_screen_quit": {
        "body": "(change_screen_quit),",
        "prefix": "change_screen_quit",
        "scope": "python"
    },

    "change_screen_return": {
        "body": "(change_screen_return,0),",
        "prefix": "change_screen_return",
        "scope": "python"
    },

    "change_screen_trade": {
        "body": "(change_screen_trade,trp_id),",
        "prefix": "change_screen_trade",
        "scope": "python"
    },

    "change_screen_trade_prisoners": {
        "body": "(change_screen_trade_prisoners),",
        "prefix": "change_screen_trade_prisoners",
        "scope": "python"
    },

    "change_screen_training": {
        "body": "(change_screen_training),",
        "prefix": "change_screen_training",
        "scope": "python"
    },

    "change_screen_view_character": {
        "body": "(change_screen_view_character),",
        "prefix": "change_screen_view_character",
        "scope": "python"
    },

    "check_quest_active": {
        "body": "(check_quest_active,quest_id),",
        "prefix": "check_quest_active",
        "scope": "python"
    },

    "check_quest_concluded": {
        "body": "(check_quest_concluded,quest_id),",
        "prefix": "check_quest_concluded",
        "scope": "python"
    },

    "check_quest_failed": {
        "body": "(check_quest_failed,quest_id),",
        "prefix": "check_quest_failed",
        "scope": "python"
    },

    "check_quest_finished": {
        "body": "(check_quest_finished,quest_id),",
        "prefix": "check_quest_finished",
        "scope": "python"
    },

    "check_quest_succeeded": {
        "body": "(check_quest_succeeded,quest_id),",
        "prefix": "check_quest_succeeded",
        "scope": "python"
    },

    "class_is_listening_order": {
        "body": "(class_is_listening_order,team_no,sub_class),",
        "prefix": "class_is_listening_order",
        "scope": "python"
    },

    "class_set_name": {
        "body": "(class_set_name,sub_class,str_id),",
        "prefix": "class_set_name",
        "scope": "python"
    },

    "clear_omitted_keys": {
        "body": "(clear_omitted_keys),",
        "prefix": "clear_omitted_keys",
        "scope": "python"
    },

    "close_item_details": {
        "body": "(close_item_details),",
        "prefix": "close_item_details",
        "scope": "python"
    },

    "complete_quest": {
        "body": "(complete_quest,qst_id),",
        "prefix": "complete_quest",
        "scope": "python"
    },

    "conclude_quest": {
        "body": "(conclude_quest,qst_id),",
        "prefix": "conclude_quest",
        "scope": "python"
    },

    "context_menu_add_item": {
        "body": "(context_menu_add_item,str_id,value),",
        "prefix": "context_menu_add_item",
        "scope": "python"
    },

    "conversation_screen_is_active": {
        "body": "(conversation_screen_is_active),",
        "prefix": "conversation_screen_is_active",
        "scope": "python"
    },

    "convert_from_fixed_point": {
        "body": "(convert_from_fixed_point,destination),",
        "prefix": "convert_from_fixed_point",
        "scope": "python"
    },

    "convert_to_fixed_point": {
        "body": "(convert_to_fixed_point,destination_fixed_point),",
        "prefix": "convert_to_fixed_point",
        "scope": "python"
    },

    "copy_position": {
        "body": "(copy_position,pos,pos),",
        "prefix": "copy_position",
        "scope": "python"
    },

    "create_button_overlay": {
        "body": "(create_button_overlay,\\g_button_id,str_id),",
        "prefix": "create_button_overlay",
        "scope": "python"
    },

    "create_check_box_overlay": {
        "body": "(create_check_box_overlay,\\g_check_box_id),",
        "prefix": "create_check_box_overlay",
        "scope": "python"
    },

    "create_combo_button_overlay": {
        "body": "(create_combo_button_overlay,\\g_combo_button_id),",
        "prefix": "create_combo_button_overlay",
        "scope": "python"
    },

    "create_combo_label_overlay": {
        "body": "(create_combo_label_overlay,\\g_combo_label_id),",
        "prefix": "create_combo_label_overlay",
        "scope": "python"
    },

    "create_game_button_overlay": {
        "body": "(create_game_button_overlay,\\g_game_button_id,str_id),",
        "prefix": "create_game_button_overlay",
        "scope": "python"
    },

    "create_image_button_overlay": {
        "body": "(create_image_button_overlay,\\g_image_button_id,mesh_id,mesh_pressed_button_mesh_id),",
        "prefix": "create_image_button_overlay",
        "scope": "python"
    },

    "create_image_button_overlay_with_tableau_material": {
        "body": "(create_image_button_overlay_with_tableau_material,\\g_overlay_id,mesh_id,tableau_id,value),",
        "prefix": "create_image_button_overlay_with_tableau_material",
        "scope": "python"
    },

    "create_in_game_button_overlay": {
        "body": "(create_in_game_button_overlay,\\g_in_game_button_id,str_id),",
        "prefix": "create_in_game_button_overlay",
        "scope": "python"
    },

    "create_listbox_overlay": {
        "body": "(create_listbox_overlay,\\g_listbox_id),",
        "prefix": "create_listbox_overlay",
        "scope": "python"
    },

    "create_mesh_overlay": {
        "body": "(create_mesh_overlay,reg,mesh_id),",
        "prefix": "create_mesh_overlay",
        "scope": "python"
    },

    "create_mesh_overlay_with_item_id": {
        "body": "(create_mesh_overlay_with_item_id,reg,itm_id),",
        "prefix": "create_mesh_overlay_with_item_id",
        "scope": "python"
    },

    "create_mesh_overlay_with_tableau_material": {
        "body": "(create_mesh_overlay_with_tableau_material,reg,mesh_id,tableau_id,value),",
        "prefix": "create_mesh_overlay_with_tableau_material",
        "scope": "python"
    },

    "create_number_box_overlay": {
        "body": "(create_number_box_overlay,\\g_number_box_id,min_value,max_value),",
        "prefix": "create_number_box_overlay",
        "scope": "python"
    },

    "create_progress_overlay": {
        "body": "(create_progress_overlay,reg,min_value,max_value),",
        "prefix": "create_progress_overlay",
        "scope": "python"
    },

    "create_simple_text_box_overlay": {
        "body": "(create_simple_text_box_overlay,reg),",
        "prefix": "create_simple_text_box_overlay",
        "scope": "python"
    },

    "create_slider_overlay": {
        "body": "(create_slider_overlay,reg,min_value,max_value),",
        "prefix": "create_slider_overlay",
        "scope": "python"
    },

    "create_text_box_overlay": {
        "body": "(create_text_box_overlay,reg),",
        "prefix": "create_text_box_overlay",
        "scope": "python"
    },

    "create_text_overlay": {
        "body": "(create_text_overlay,reg,str_id),",
        "prefix": "create_text_overlay",
        "scope": "python"
    },

    "cur_agent_set_banner_tableau_material": {
        "body": "(cur_agent_set_banner_tableau_material,tableau_material_id),",
        "prefix": "cur_agent_set_banner_tableau_material",
        "scope": "python"
    },

    "cur_item_set_tableau_material": {
        "body": "(cur_item_set_tableau_material,tableau_material_id,instance_code),",
        "prefix": "cur_item_set_tableau_material",
        "scope": "python"
    },

    "cur_map_icon_set_tableau_material": {
        "body": "(cur_map_icon_set_tableau_material,tableau_material_id,instance_code),",
        "prefix": "cur_map_icon_set_tableau_material",
        "scope": "python"
    },

    "cur_scene_prop_set_tableau_material": {
        "body": "(cur_scene_prop_set_tableau_material,tableau_material_id,instance_code),",
        "prefix": "cur_scene_prop_set_tableau_material",
        "scope": "python"
    },

    "cur_tableau_add_horse": {
        "body": "(cur_tableau_add_horse,itm_id,pos,anim_animation_id),",
        "prefix": "cur_tableau_add_horse",
        "scope": "python"
    },

    "cur_tableau_add_map_icon": {
        "body": "(cur_tableau_add_map_icon,icon_map_icon_id,pos,scale_factor_fixed_point),",
        "prefix": "cur_tableau_add_map_icon",
        "scope": "python"
    },

    "cur_tableau_add_mesh": {
        "body": "(cur_tableau_add_mesh,mesh_id,pos,scale_factor_fixed_point,alpha_fixed_point),",
        "prefix": "cur_tableau_add_mesh",
        "scope": "python"
    },

    "cur_tableau_add_mesh_with_scale_and_vertex_color": {
        "body": "(cur_tableau_add_mesh_with_scale_and_vertex_color,mesh_id,pos,pos,alpha_fixed_point,vertexcolor),6",
        "prefix": "cur_tableau_add_mesh_with_scale_and_vertex_color",
        "scope": "python"
    },

    "cur_tableau_add_mesh_with_vertex_color": {
        "body": "(cur_tableau_add_mesh_with_vertex_color,mesh_id,pos,scale_factor_fixed_point,alpha_fixed_point,vertex_color),6",
        "prefix": "cur_tableau_add_mesh_with_vertex_color",
        "scope": "python"
    },

    "cur_tableau_add_override_item": {
        "body": "(cur_tableau_add_override_item,itm_item_kind_id),",
        "prefix": "cur_tableau_add_override_item",
        "scope": "python"
    },

    "cur_tableau_add_point_light": {
        "body": "(cur_tableau_add_point_light,icon_map_icon_id,pos,red_fixed_point,green_fixed_point,blue_fixed_point),6",
        "prefix": "cur_tableau_add_point_light",
        "scope": "python"
    },

    "cur_tableau_add_sun_light": {
        "body": "(cur_tableau_add_sun_light,icon_map_icon_id,pos,red_fixed_point,green_fixed_point,blue_fixed_point),6",
        "prefix": "cur_tableau_add_sun_light",
        "scope": "python"
    },

    "cur_tableau_add_tableau_mesh": {
        "body": "(cur_tableau_add_tableau_mesh,tableau_material_id,value,pos,0,0),",
        "prefix": "cur_tableau_add_tableau_mesh",
        "scope": "python"
    },

    "cur_tableau_add_troop": {
        "body": "(cur_tableau_add_troop,trp_id,pos,anim_animation_idinstance_no),",
        "prefix": "cur_tableau_add_troop",
        "scope": "python"
    },

    "cur_tableau_clear_override_items": {
        "body": "(cur_tableau_clear_override_items),",
        "prefix": "cur_tableau_clear_override_items",
        "scope": "python"
    },

    "cur_tableau_render_as_alpha_mask": {
        "body": "(cur_tableau_render_as_alpha_mask),",
        "prefix": "cur_tableau_render_as_alpha_mask",
        "scope": "python"
    },

    "cur_tableau_set_ambient_light": {
        "body": "(cur_tableau_set_ambient_light,red_fixed_point,green_fixed_point,blue_fixed_point),",
        "prefix": "cur_tableau_set_ambient_light",
        "scope": "python"
    },

    "cur_tableau_set_background_color": {
        "body": "(cur_tableau_set_background_color,0xAARRGGBB),",
        "prefix": "cur_tableau_set_background_color",
        "scope": "python"
    },

    "cur_tableau_set_camera_parameters": {
        "body": "(cur_tableau_set_camera_parameters,is_perspective,camera_width_times_000,camera_height_times_00,camera_near_times_000,camera_far_times_000),6",
        "prefix": "cur_tableau_set_camera_parameters",
        "scope": "python"
    },

    "cur_tableau_set_camera_position": {
        "body": "(cur_tableau_set_camera_position,pos),",
        "prefix": "cur_tableau_set_camera_position",
        "scope": "python"
    },

    "cur_tableau_set_override_flags": {
        "body": "(cur_tableau_set_override_flags,value),",
        "prefix": "cur_tableau_set_override_flags",
        "scope": "python"
    },

    "dialog_box": {
        "body": "(dialog_box,text_string_id,title_string_id),",
        "prefix": "dialog_box",
        "scope": "python"
    },

    "disable_menu_option": {
        "body": "(disable_menu_option),",
        "prefix": "disable_menu_option",
        "scope": "python"
    },

    "disable_party": {
        "body": "(disable_party,party_id),",
        "prefix": "disable_party",
        "scope": "python"
    },

    "display_debug_message": {
        "body": "(display_debug_message,str_id,0xRRGGBB),",
        "prefix": "display_debug_message",
        "scope": "python"
    },

    "display_log_message": {
        "body": "(display_log_message,str_id,0xRRGGBB),",
        "prefix": "display_log_message",
        "scope": "python"
    },

    "display_message": {
        "body": "(display_message,str_id,0xRRGGBB),",
        "prefix": "display_message",
        "scope": "python"
    },

    "distribute_party_among_party_group": {
        "body": "(distribute_party_among_party_group,party_to_be_distributed,group_root_part),",
        "prefix": "distribute_party_among_party_group",
        "scope": "python"
    },

    "else-try": {
        "body": "(else_try),",
        "prefix": "else-try",
        "scope": "python"
    },

    "else_try": {
        "body": "(else_try),",
        "prefix": "else_try",
        "scope": "python"
    },

    "enable_party": {
        "body": "(enable_party,party_id),",
        "prefix": "enable_party",
        "scope": "python"
    },

    "encountered_party_is_attacker": {
        "body": "(encountered_party_is_attacker),",
        "prefix": "encountered_party_is_attacker",
        "scope": "python"
    },

    "encounter_attack": {
        "body": "(encounter_attack),",
        "prefix": "encounter_attack",
        "scope": "python"
    },

    "end_current_battle": {
        "body": "(end_current_battle),",
        "prefix": "end_current_battle",
        "scope": "python"
    },

    "entering_town": {
        "body": "(entering_town,town_id),",
        "prefix": "entering_town",
        "scope": "python"
    },

    "entry_point_get_position": {
        "body": "(entry_point_get_position,pos,entry_no),",
        "prefix": "entry_point_get_position",
        "scope": "python"
    },

    "entry_point_is_auto_generated": {
        "body": "(entry_point_is_auto_generated,entry_no),",
        "prefix": "entry_point_is_auto_generated",
        "scope": "python"
    },

    "entry_point_set_position": {
        "body": "(entry_point_set_position,entry_no,pos),",
        "prefix": "entry_point_set_position",
        "scope": "python"
    },

    "eq": {
        "body": "(eq,value_,value_),",
        "prefix": "eq",
        "scope": "python"
    },

    "face_keys_get_age": {
        "body": "(face_keys_get_age,destination,string_no),",
        "prefix": "face_keys_get_age",
        "scope": "python"
    },

    "face_keys_get_beard": {
        "body": "(face_keys_get_beard,destination,string_no),",
        "prefix": "face_keys_get_beard",
        "scope": "python"
    },

    "face_keys_get_face_texture": {
        "body": "(face_keys_get_face_texture,destination,string_no),",
        "prefix": "face_keys_get_face_texture",
        "scope": "python"
    },

    "face_keys_get_hair": {
        "body": "(face_keys_get_hair,destination,string_no),",
        "prefix": "face_keys_get_hair",
        "scope": "python"
    },

    "face_keys_get_hair_color": {
        "body": "(face_keys_get_hair_color,destination,string_no),",
        "prefix": "face_keys_get_hair_color",
        "scope": "python"
    },

    "face_keys_get_hair_texture": {
        "body": "(face_keys_get_hair_texture,destination,string_no),",
        "prefix": "face_keys_get_hair_texture",
        "scope": "python"
    },

    "face_keys_get_morph_key": {
        "body": "(face_keys_get_morph_key,destination,string_no,key_no),",
        "prefix": "face_keys_get_morph_key",
        "scope": "python"
    },

    "face_keys_get_skin_color": {
        "body": "(face_keys_get_skin_color,destination,string_no),",
        "prefix": "face_keys_get_skin_color",
        "scope": "python"
    },

    "face_keys_set_age": {
        "body": "(face_keys_set_age,string_no,value),",
        "prefix": "face_keys_set_age",
        "scope": "python"
    },

    "face_keys_set_beard": {
        "body": "(face_keys_set_beard,string_no,value),",
        "prefix": "face_keys_set_beard",
        "scope": "python"
    },

    "face_keys_set_face_texture": {
        "body": "(face_keys_set_face_texture,string_no,value),",
        "prefix": "face_keys_set_face_texture",
        "scope": "python"
    },

    "face_keys_set_hair": {
        "body": "(face_keys_set_hair,string_no,value),",
        "prefix": "face_keys_set_hair",
        "scope": "python"
    },

    "face_keys_set_hair_color": {
        "body": "(face_keys_set_hair_color,string_no,value),",
        "prefix": "face_keys_set_hair_color",
        "scope": "python"
    },

    "face_keys_set_hair_texture": {
        "body": "(face_keys_set_hair_texture,string_no,value),",
        "prefix": "face_keys_set_hair_texture",
        "scope": "python"
    },

    "face_keys_set_morph_key": {
        "body": "(face_keys_set_morph_key,string_no,key_no,value),",
        "prefix": "face_keys_set_morph_key",
        "scope": "python"
    },

    "face_keys_set_skin_color": {
        "body": "(face_keys_set_skin_color,string_no,value),",
        "prefix": "face_keys_set_skin_color",
        "scope": "python"
    },

    "faction_get_color": {
        "body": "(faction_get_color,destination,faction_id),",
        "prefix": "faction_get_color",
        "scope": "python"
    },

    "faction_get_slot": {
        "body": "(faction_get_slot,destination,faction_id,slot_no),",
        "prefix": "faction_get_slot",
        "scope": "python"
    },

    "faction_set_color": {
        "body": "(faction_set_color,faction_id,0xRRGGBB),",
        "prefix": "faction_set_color",
        "scope": "python"
    },

    "faction_set_name": {
        "body": "(faction_set_name,faction_id,str_id),",
        "prefix": "faction_set_name",
        "scope": "python"
    },

    "faction_set_note_available": {
        "body": "(faction_set_note_available,faction_id,value),",
        "prefix": "faction_set_note_available",
        "scope": "python"
    },

    "faction_set_slot": {
        "body": "(faction_set_slot,faction_id,slot_no,value),",
        "prefix": "faction_set_slot",
        "scope": "python"
    },

    "faction_slot_eq": {
        "body": "(faction_slot_eq,faction_id,slot_no,value),",
        "prefix": "faction_slot_eq",
        "scope": "python"
    },

    "faction_slot_ge": {
        "body": "(faction_slot_ge,faction_id,slot_no,value),",
        "prefix": "faction_slot_ge",
        "scope": "python"
    },

    "fail_quest": {
        "body": "(fail_quest,qst_id),",
        "prefix": "fail_quest",
        "scope": "python"
    },

    "finish_mission": {
        "body": "(finish_mission,delay_in_seconds),",
        "prefix": "finish_mission",
        "scope": "python"
    },

    "finish_party_battle_mode": {
        "body": "(finish_party_battle_mode),",
        "prefix": "finish_party_battle_mode",
        "scope": "python"
    },

    "game_in_multiplayer_mode": {
        "body": "(game_in_multiplayer_mode),",
        "prefix": "game_in_multiplayer_mode",
        "scope": "python"
    },

    "game_key_clicked": {
        "body": "(game_key_clicked,gk_id),",
        "prefix": "game_key_clicked",
        "scope": "python"
    },

    "game_key_is_down": {
        "body": "(game_key_is_down,gk_id),",
        "prefix": "game_key_is_down",
        "scope": "python"
    },

    "ge": {
        "body": "(ge,value_,value_),",
        "prefix": "ge",
        "scope": "python"
    },

    "get_achievement_stat": {
        "body": "(get_achievement_stat,destination,achievement_id,stat_index),",
        "prefix": "get_achievement_stat",
        "scope": "python"
    },

    "get_angle_between_positions": {
        "body": "(get_angle_between_positions,destination_fixed_point,pos,pos),",
        "prefix": "get_angle_between_positions",
        "scope": "python"
    },

    "get_average_game_difficulty": {
        "body": "(get_average_game_difficulty,destination),",
        "prefix": "get_average_game_difficulty",
        "scope": "python"
    },

    "get_battle_advantage": {
        "body": "(get_battle_advantage,destination),",
        "prefix": "get_battle_advantage",
        "scope": "python"
    },

    "get_distance_between_positions": {
        "body": "(get_distance_between_positions,destination,pos,pos),",
        "prefix": "get_distance_between_positions",
        "scope": "python"
    },

    "get_distance_between_positions_in_meters": {
        "body": "(get_distance_between_positions_in_meters,destination,pos,pos),",
        "prefix": "get_distance_between_positions_in_meters",
        "scope": "python"
    },

    "get_global_cloud_amount": {
        "body": "(get_global_cloud_amount,destination),",
        "prefix": "get_global_cloud_amount",
        "scope": "python"
    },

    "get_global_haze_amount": {
        "body": "(get_global_haze_amount,destination),",
        "prefix": "get_global_haze_amount",
        "scope": "python"
    },

    "get_level_boundary": {
        "body": "(get_level_boundary,destination,level_no),",
        "prefix": "get_level_boundary",
        "scope": "python"
    },

    "get_max_players": {
        "body": "(get_max_players,destination),",
        "prefix": "get_max_players",
        "scope": "python"
    },

    "get_party_ai_behavior": {
        "body": "(get_party_ai_behavior,destination,party_id),",
        "prefix": "get_party_ai_behavior",
        "scope": "python"
    },

    "get_party_ai_current_behavior": {
        "body": "(get_party_ai_current_behavior,destination,party_id),",
        "prefix": "get_party_ai_current_behavior",
        "scope": "python"
    },

    "get_party_ai_current_object": {
        "body": "(get_party_ai_current_object,destination,party_id),",
        "prefix": "get_party_ai_current_object",
        "scope": "python"
    },

    "get_party_ai_object": {
        "body": "(get_party_ai_object,destination,party_id),",
        "prefix": "get_party_ai_object",
        "scope": "python"
    },

    "get_player_agent_kill_count": {
        "body": "(get_player_agent_kill_count,destination,[get_wounded0-]),",
        "prefix": "get_player_agent_kill_count",
        "scope": "python"
    },

    "get_player_agent_no": {
        "body": "(get_player_agent_no,destination),",
        "prefix": "get_player_agent_no",
        "scope": "python"
    },

    "get_player_agent_own_troop_kill_count": {
        "body": "(get_player_agent_own_troop_kill_count,destination,[get_wounded0-]),",
        "prefix": "get_player_agent_own_troop_kill_count",
        "scope": "python"
    },

    "get_scene_boundaries": {
        "body": "(get_scene_boundaries,pos,pos),",
        "prefix": "get_scene_boundaries",
        "scope": "python"
    },

    "get_sq_distance_between_positions": {
        "body": "(get_sq_distance_between_positions,destination,pos,pos),",
        "prefix": "get_sq_distance_between_positions",
        "scope": "python"
    },

    "get_sq_distance_between_positions_in_meters": {
        "body": "(get_sq_distance_between_positions_in_meters,destination,pos,pos),",
        "prefix": "get_sq_distance_between_positions_in_meters",
        "scope": "python"
    },

    "get_sq_distance_between_position_heights": {
        "body": "(get_sq_distance_between_position_heights,destination,pos,pos),",
        "prefix": "get_sq_distance_between_position_heights",
        "scope": "python"
    },

    "get_trigger_object_position": {
        "body": "(get_trigger_object_position,pos),",
        "prefix": "get_trigger_object_position",
        "scope": "python"
    },

    "gt": {
        "body": "(gt,value_,value_),",
        "prefix": "gt",
        "scope": "python"
    },

    "heal_party": {
        "body": "(heal_party,party_id),",
        "prefix": "heal_party",
        "scope": "python"
    },

    "hero_can_join": {
        "body": "(hero_can_join,[party_id]),",
        "prefix": "hero_can_join",
        "scope": "python"
    },

    "hero_can_join_as_prisoner": {
        "body": "(hero_can_join_as_prisoner,[party_id]),",
        "prefix": "hero_can_join_as_prisoner",
        "scope": "python"
    },

    "inflict_casualties_to_party_group": {
        "body": "(inflict_casualties_to_party_group,parent_party_id,attack_rounds,party_id_to_add_causalties_to),",
        "prefix": "inflict_casualties_to_party_group",
        "scope": "python"
    },

    "init_position": {
        "body": "(init_position,pos),",
        "prefix": "init_position",
        "scope": "python"
    },

    "is_between": {
        "body": "(is_between,value,lower_bound,upper_bound),",
        "prefix": "is_between",
        "scope": "python"
    },

    "is_currently_night": {
        "body": "(is_currently_night),",
        "prefix": "is_currently_night",
        "scope": "python"
    },

    "is_edit_mode_enabled": {
        "body": "(is_edit_mode_enabled),",
        "prefix": "is_edit_mode_enabled",
        "scope": "python"
    },

    "is_presentation_active": {
        "body": "(is_presentation_active,prsnt_id),",
        "prefix": "is_presentation_active",
        "scope": "python"
    },

    "is_trial_version": {
        "body": "(is_trial_version),",
        "prefix": "is_trial_version",
        "scope": "python"
    },

    "is_zoom_disabled": {
        "body": "(is_zoom_disabled),",
        "prefix": "is_zoom_disabled",
        "scope": "python"
    },

    "item_get_abundance": {
        "body": "(item_get_abundance,destination,item_kind_no),",
        "prefix": "item_get_abundance",
        "scope": "python"
    },

    "item_get_accuracy": {
        "body": "(item_get_accuracy,destination,item_kind_no),",
        "prefix": "item_get_accuracy",
        "scope": "python"
    },

    "item_get_body_armor": {
        "body": "(item_get_body_armor,destination,item_kind_no),",
        "prefix": "item_get_body_armor",
        "scope": "python"
    },

    "item_get_difficulty": {
        "body": "(item_get_difficulty,destination,item_kind_no),",
        "prefix": "item_get_difficulty",
        "scope": "python"
    },

    "item_get_food_quality": {
        "body": "(item_get_food_quality,destination,item_kind_no),",
        "prefix": "item_get_food_quality",
        "scope": "python"
    },

    "item_get_head_armor": {
        "body": "(item_get_head_armor,destination,item_kind_no),",
        "prefix": "item_get_head_armor",
        "scope": "python"
    },

    "item_get_hit_points": {
        "body": "(item_get_hit_points,destination,item_kind_no),",
        "prefix": "item_get_hit_points",
        "scope": "python"
    },

    "item_get_horse_charge_damage": {
        "body": "(item_get_horse_charge_damage,destination,item_kind_no),",
        "prefix": "item_get_horse_charge_damage",
        "scope": "python"
    },

    "item_get_horse_maneuver": {
        "body": "(item_get_horse_maneuver,destination,item_kind_no),",
        "prefix": "item_get_horse_maneuver",
        "scope": "python"
    },

    "item_get_horse_scale": {
        "body": "(item_get_horse_scale,destination_fixed_point,item_kind_no),",
        "prefix": "item_get_horse_scale",
        "scope": "python"
    },

    "item_get_horse_speed": {
        "body": "(item_get_horse_speed,destination,item_kind_no),",
        "prefix": "item_get_horse_speed",
        "scope": "python"
    },

    "item_get_leg_armor": {
        "body": "(item_get_leg_armor,destination,item_kind_no),",
        "prefix": "item_get_leg_armor",
        "scope": "python"
    },

    "item_get_max_ammo": {
        "body": "(item_get_max_ammo,destination,item_kind_no),",
        "prefix": "item_get_max_ammo",
        "scope": "python"
    },

    "item_get_missile_speed": {
        "body": "(item_get_missile_speed,destination,item_kind_no),",
        "prefix": "item_get_missile_speed",
        "scope": "python"
    },

    "item_get_shield_height": {
        "body": "(item_get_shield_height,destination_fixed_point,item_kind_no),",
        "prefix": "item_get_shield_height",
        "scope": "python"
    },

    "item_get_slot": {
        "body": "(item_get_slot,destination,item_id,slot_no),",
        "prefix": "item_get_slot",
        "scope": "python"
    },

    "item_get_speed_rating": {
        "body": "(item_get_speed_rating,destination,item_kind_no),",
        "prefix": "item_get_speed_rating",
        "scope": "python"
    },

    "item_get_swing_damage": {
        "body": "(item_get_swing_damage,destination,item_kind_no),",
        "prefix": "item_get_swing_damage",
        "scope": "python"
    },

    "item_get_swing_damage_type": {
        "body": "(item_get_swing_damage_type,destination,item_kind_no),",
        "prefix": "item_get_swing_damage_type",
        "scope": "python"
    },

    "item_get_thrust_damage": {
        "body": "(item_get_thrust_damage,destination,item_kind_no),",
        "prefix": "item_get_thrust_damage",
        "scope": "python"
    },

    "item_get_thrust_damage_type": {
        "body": "(item_get_thrust_damage_type,destination,item_kind_no),",
        "prefix": "item_get_thrust_damage_type",
        "scope": "python"
    },

    "item_get_type": {
        "body": "(item_get_type,destination,itm_id),",
        "prefix": "item_get_type",
        "scope": "python"
    },

    "item_get_value": {
        "body": "(item_get_value,destination,item_kind_no),",
        "prefix": "item_get_value",
        "scope": "python"
    },

    "item_get_weapon_length": {
        "body": "(item_get_weapon_length,destination,item_kind_no),",
        "prefix": "item_get_weapon_length",
        "scope": "python"
    },

    "item_get_weight": {
        "body": "(item_get_weight,destination_fixed_point,item_kind_no),",
        "prefix": "item_get_weight",
        "scope": "python"
    },

    "item_has_capability": {
        "body": "(item_has_capability,item_kind_no,itcf_capability),",
        "prefix": "item_has_capability",
        "scope": "python"
    },

    "item_has_faction": {
        "body": "(item_has_faction,item_kind_no,faction_no),",
        "prefix": "item_has_faction",
        "scope": "python"
    },

    "item_has_modifier": {
        "body": "(item_has_modifier,item_kind_no,imod_item_modifier_no),",
        "prefix": "item_has_modifier",
        "scope": "python"
    },

    "item_has_property": {
        "body": "(item_has_property,item_kind_no,itp_property),",
        "prefix": "item_has_property",
        "scope": "python"
    },

    "item_set_slot": {
        "body": "(item_set_slot,item_id,slot_no,value),",
        "prefix": "item_set_slot",
        "scope": "python"
    },

    "item_slot_eq": {
        "body": "(item_slot_eq,item_id,slot_no,value),",
        "prefix": "item_slot_eq",
        "scope": "python"
    },

    "item_slot_ge": {
        "body": "(item_slot_ge,item_id,slot_no,value),",
        "prefix": "item_slot_ge",
        "scope": "python"
    },

    "jump_to_menu": {
        "body": "(jump_to_menu,mnu_menu_id),",
        "prefix": "jump_to_menu",
        "scope": "python"
    },

    "jump_to_scene": {
        "body": "(jump_to_scene,scene_id,[entry_no]),",
        "prefix": "jump_to_scene",
        "scope": "python"
    },

    "key_clicked": {
        "body": "(key_clicked,key_id),",
        "prefix": "key_clicked",
        "scope": "python"
    },

    "key_is_down": {
        "body": "(key_is_down,key_id),",
        "prefix": "key_is_down",
        "scope": "python"
    },

    "kick_player": {
        "body": "(kick_player,player_id),",
        "prefix": "kick_player",
        "scope": "python"
    },

    "le": {
        "body": "(le,value_,value_),",
        "prefix": "le",
        "scope": "python"
    },

    "leave_encounter": {
        "body": "(leave_encounter),",
        "prefix": "leave_encounter",
        "scope": "python"
    },

    "lt": {
        "body": "(lt,value_,value_),",
        "prefix": "lt",
        "scope": "python"
    },

    "main_hero_fallen": {
        "body": "(main_hero_fallen),",
        "prefix": "main_hero_fallen",
        "scope": "python"
    },

    "main_party_has_troop": {
        "body": "(main_party_has_troop,trp_id),",
        "prefix": "main_party_has_troop",
        "scope": "python"
    },

    "map_free": {
        "body": "(map_free),]]>",
        "prefix": "map_free",
        "scope": "python"
    },

    "map_get_land_position_around_position": {
        "body": "(map_get_land_position_around_position,pos,pos,radius),",
        "prefix": "map_get_land_position_around_position",
        "scope": "python"
    },

    "map_get_random_position_around_position": {
        "body": "(map_get_random_position_around_position,pos,pos,radius),",
        "prefix": "map_get_random_position_around_position",
        "scope": "python"
    },

    "map_get_water_position_around_position": {
        "body": "(map_get_water_position_around_position,pos,pos,radius),",
        "prefix": "map_get_water_position_around_position",
        "scope": "python"
    },

    "mission_cam_animate_to_aperture": {
        "body": "(mission_cam_animate_to_aperture,value,duration-in-/000-seconds,linear_velocity_value),",
        "prefix": "mission_cam_animate_to_aperture",
        "scope": "python"
    },

    "mission_cam_animate_to_position": {
        "body": "(mission_cam_animate_to_position,pos,duration-in-/000-seconds,value),",
        "prefix": "mission_cam_animate_to_position",
        "scope": "python"
    },

    "mission_cam_animate_to_position_and_aperture": {
        "body": "(mission_cam_animate_to_position_and_aperture,pos,value,duration-in-/000-seconds,linear_velocity_value),",
        "prefix": "mission_cam_animate_to_position_and_aperture",
        "scope": "python"
    },

    "mission_cam_animate_to_screen_color": {
        "body": "(mission_cam_animate_to_screen_color,0xAARRGGBB,duration-in-/000-seconds),",
        "prefix": "mission_cam_animate_to_screen_color",
        "scope": "python"
    },

    "mission_cam_clear_target_agent": {
        "body": "(mission_cam_clear_target_agent),",
        "prefix": "mission_cam_clear_target_agent",
        "scope": "python"
    },

    "mission_cam_get_aperture": {
        "body": "(mission_cam_get_aperture,destination),",
        "prefix": "mission_cam_get_aperture",
        "scope": "python"
    },

    "mission_cam_get_position": {
        "body": "(mission_cam_get_position,pos),",
        "prefix": "mission_cam_get_position",
        "scope": "python"
    },

    "mission_cam_set_animation": {
        "body": "(mission_cam_set_animation,anim_animation_id),",
        "prefix": "mission_cam_set_animation",
        "scope": "python"
    },

    "mission_cam_set_aperture": {
        "body": "(mission_cam_set_aperture,value),",
        "prefix": "mission_cam_set_aperture",
        "scope": "python"
    },

    "mission_cam_set_mode": {
        "body": "(mission_cam_set_mode,mission_cam_mode,duration-in-/000-seconds,value),",
        "prefix": "mission_cam_set_mode",
        "scope": "python"
    },

    "mission_cam_set_position": {
        "body": "(mission_cam_set_position,pos),",
        "prefix": "mission_cam_set_position",
        "scope": "python"
    },

    "mission_cam_set_screen_color": {
        "body": "(mission_cam_set_screen_color,0xAARRGGBB),",
        "prefix": "mission_cam_set_screen_color",
        "scope": "python"
    },

    "mission_cam_set_target_agent": {
        "body": "(mission_cam_set_target_agent,agent_id,use_agent_rotation),",
        "prefix": "mission_cam_set_target_agent",
        "scope": "python"
    },

    "mission_disable_talk": {
        "body": "(mission_disable_talk),",
        "prefix": "mission_disable_talk",
        "scope": "python"
    },

    "mission_enable_talk": {
        "body": "(mission_enable_talk),",
        "prefix": "mission_enable_talk",
        "scope": "python"
    },

    "mission_get_time_speed": {
        "body": "(mission_get_time_speed,destination_fixed_point),",
        "prefix": "mission_get_time_speed",
        "scope": "python"
    },

    "mission_set_duel_mode": {
        "body": "(mission_set_duel_mode,value0-),",
        "prefix": "mission_set_duel_mode",
        "scope": "python"
    },

    "mission_set_time_speed": {
        "body": "(mission_set_time_speed,value_fixed_point),",
        "prefix": "mission_set_time_speed",
        "scope": "python"
    },

    "mission_time_speed_move_to_value": {
        "body": "(mission_time_speed_move_to_value,value_fixed_point,duration-in-/000-seconds),",
        "prefix": "mission_time_speed_move_to_value",
        "scope": "python"
    },

    "mission_tpl_entry_add_override_item": {
        "body": "(mission_tpl_entry_add_override_item,mt_mission_template_id,entry_no,itm_item_kind_id),",
        "prefix": "mission_tpl_entry_add_override_item",
        "scope": "python"
    },

    "mission_tpl_entry_clear_override_items": {
        "body": "(mission_tpl_entry_clear_override_items,mt_mission_template_id,entry_no),",
        "prefix": "mission_tpl_entry_clear_override_items",
        "scope": "python"
    },

    "mission_tpl_entry_set_override_flags": {
        "body": "(mission_tpl_entry_set_override_flags,mt_mission_template_id,entry_no,value),",
        "prefix": "mission_tpl_entry_set_override_flags",
        "scope": "python"
    },

    "modify_visitors_at_site": {
        "body": "(modify_visitors_at_site,scene_id),",
        "prefix": "modify_visitors_at_site",
        "scope": "python"
    },

    "mouse_get_position": {
        "body": "(mouse_get_position,pos),",
        "prefix": "mouse_get_position",
        "scope": "python"
    },

    "multiplayer_clear_scene": {
        "body": "(multiplayer_clear_scene),",
        "prefix": "multiplayer_clear_scene",
        "scope": "python"
    },

    "multiplayer_find_spawn_point": {
        "body": "(multiplayer_find_spawn_point,destination,team_no,examine_all_spawn_points,is_horseman),",
        "prefix": "multiplayer_find_spawn_point",
        "scope": "python"
    },

    "multiplayer_get_my_gold": {
        "body": "(multiplayer_get_my_gold,destination),",
        "prefix": "multiplayer_get_my_gold",
        "scope": "python"
    },

    "multiplayer_get_my_player": {
        "body": "(multiplayer_get_my_player,destination),",
        "prefix": "multiplayer_get_my_player",
        "scope": "python"
    },

    "multiplayer_get_my_team": {
        "body": "(multiplayer_get_my_team,destination),",
        "prefix": "multiplayer_get_my_team",
        "scope": "python"
    },

    "multiplayer_get_my_troop": {
        "body": "(multiplayer_get_my_troop,destination),",
        "prefix": "multiplayer_get_my_troop",
        "scope": "python"
    },

    "multiplayer_is_dedicated_server": {
        "body": "(multiplayer_is_dedicated_server),",
        "prefix": "multiplayer_is_dedicated_server",
        "scope": "python"
    },

    "multiplayer_is_server": {
        "body": "(multiplayer_is_server),",
        "prefix": "multiplayer_is_server",
        "scope": "python"
    },

    "multiplayer_make_everyone_enemy": {
        "body": "(multiplayer_make_everyone_enemy),",
        "prefix": "multiplayer_make_everyone_enemy",
        "scope": "python"
    },

    "multiplayer_send_2_int_to_player": {
        "body": "(multiplayer_send__int_to_player,player_id,message_type,value_,value_),",
        "prefix": "multiplayer_send_2_int_to_player",
        "scope": "python"
    },

    "multiplayer_send_2_int_to_server": {
        "body": "(multiplayer_send__int_to_server,message_type,value_,value_),",
        "prefix": "multiplayer_send_2_int_to_server",
        "scope": "python"
    },

    "multiplayer_send_3_int_to_player": {
        "body": "(multiplayer_send__int_to_player,player_id,message_type,value_,value_,value_),6",
        "prefix": "multiplayer_send_3_int_to_player",
        "scope": "python"
    },

    "multiplayer_send_3_int_to_server": {
        "body": "(multiplayer_send__int_to_server,message_type,value_,value_,value_),",
        "prefix": "multiplayer_send_3_int_to_server",
        "scope": "python"
    },

    "multiplayer_send_4_int_to_player": {
        "body": "(multiplayer_send__int_to_player,player_id,message_type,value_,value_,value_,6value_),7",
        "prefix": "multiplayer_send_4_int_to_player",
        "scope": "python"
    },

    "multiplayer_send_4_int_to_server": {
        "body": "(multiplayer_send__int_to_server,message_type,value_,value_,value_,value_),6",
        "prefix": "multiplayer_send_4_int_to_server",
        "scope": "python"
    },

    "multiplayer_send_int_to_player": {
        "body": "(multiplayer_send_int_to_player,player_id,message_type,value),",
        "prefix": "multiplayer_send_int_to_player",
        "scope": "python"
    },

    "multiplayer_send_int_to_server": {
        "body": "(multiplayer_send_int_to_server,message_type,value),",
        "prefix": "multiplayer_send_int_to_server",
        "scope": "python"
    },

    "multiplayer_send_message_to_player": {
        "body": "(multiplayer_send_message_to_player,player_id,message_type),",
        "prefix": "multiplayer_send_message_to_player",
        "scope": "python"
    },

    "multiplayer_send_message_to_server": {
        "body": "(multiplayer_send_message_to_server,message_type),",
        "prefix": "multiplayer_send_message_to_server",
        "scope": "python"
    },

    "multiplayer_send_string_to_player": {
        "body": "(multiplayer_send_string_to_player,player_id,message_type,string_id),",
        "prefix": "multiplayer_send_string_to_player",
        "scope": "python"
    },

    "multiplayer_send_string_to_server": {
        "body": "(multiplayer_send_string_to_server,message_type,string_id),",
        "prefix": "multiplayer_send_string_to_server",
        "scope": "python"
    },

    "multiplayer_set_my_troop": {
        "body": "(multiplayer_set_my_troop,troop_id),",
        "prefix": "multiplayer_set_my_troop",
        "scope": "python"
    },

    "music_set_culture": {
        "body": "(music_set_culture,mtf_culture_type),",
        "prefix": "music_set_culture",
        "scope": "python"
    },

    "music_set_situation": {
        "body": "(music_set_situation,mtf_situation_type),",
        "prefix": "music_set_situation",
        "scope": "python"
    },

    "neq": {
        "body": "(neq,value_,value_),",
        "prefix": "neq",
        "scope": "python"
    },

    "new_script": {
        "body": "#script_name",
        "prefix": "new_script",
        "scope": "python"
    },

    "num_active_teams_le": {
        "body": "(num_active_teams_le,value),",
        "prefix": "num_active_teams_le",
        "scope": "python"
    },

    "omit_key_once": {
        "body": "(omit_key_once,key_id),",
        "prefix": "omit_key_once",
        "scope": "python"
    },

    "options_get_campaign_ai": {
        "body": "(options_get_campaign_ai,destination),",
        "prefix": "options_get_campaign_ai",
        "scope": "python"
    },

    "options_get_combat_ai": {
        "body": "(options_get_combat_ai,destination),",
        "prefix": "options_get_combat_ai",
        "scope": "python"
    },

    "options_get_combat_speed": {
        "body": "(options_get_combat_speed,destination),",
        "prefix": "options_get_combat_speed",
        "scope": "python"
    },

    "options_get_damage_to_friends": {
        "body": "(options_get_damage_to_friends,destination),",
        "prefix": "options_get_damage_to_friends",
        "scope": "python"
    },

    "options_get_damage_to_player": {
        "body": "(options_get_damage_to_player,destination),",
        "prefix": "options_get_damage_to_player",
        "scope": "python"
    },

    "options_set_campaign_ai": {
        "body": "(options_set_campaign_ai,value),",
        "prefix": "options_set_campaign_ai",
        "scope": "python"
    },

    "options_set_combat_ai": {
        "body": "(options_set_combat_ai,value),",
        "prefix": "options_set_combat_ai",
        "scope": "python"
    },

    "options_set_combat_speed": {
        "body": "(options_set_combat_speed,value),",
        "prefix": "options_set_combat_speed",
        "scope": "python"
    },

    "options_set_damage_to_friends": {
        "body": "(options_set_damage_to_friends,value),",
        "prefix": "options_set_damage_to_friends",
        "scope": "python"
    },

    "options_set_damage_to_player": {
        "body": "(options_set_damage_to_player,value),",
        "prefix": "options_set_damage_to_player",
        "scope": "python"
    },

    "overlay_add_item": {
        "body": "(overlay_add_item,\\g_overlay_id,str_id),",
        "prefix": "overlay_add_item",
        "scope": "python"
    },

    "overlay_animate_to_alpha": {
        "body": "(overlay_animate_to_alpha,\\g_overlay_id,00,0xAA),",
        "prefix": "overlay_animate_to_alpha",
        "scope": "python"
    },

    "overlay_animate_to_color": {
        "body": "(overlay_animate_to_color,\\g_overlay_id,00,0xRRGGBB),",
        "prefix": "overlay_animate_to_color",
        "scope": "python"
    },

    "overlay_animate_to_highlight_alpha": {
        "body": "(overlay_animate_to_highlight_alpha,\\g_overlay_id,00,0xAA),",
        "prefix": "overlay_animate_to_highlight_alpha",
        "scope": "python"
    },

    "overlay_animate_to_highlight_color": {
        "body": "(overlay_animate_to_highlight_color,\\g_overlay_id,00,0xRRGGBB),",
        "prefix": "overlay_animate_to_highlight_color",
        "scope": "python"
    },

    "overlay_animate_to_position": {
        "body": "(overlay_animate_to_position,\\g_overlay_id,00,pos),",
        "prefix": "overlay_animate_to_position",
        "scope": "python"
    },

    "overlay_animate_to_size": {
        "body": "(overlay_animate_to_size,\\g_overlay_id,00,pos),",
        "prefix": "overlay_animate_to_size",
        "scope": "python"
    },

    "overlay_get_position": {
        "body": "(overlay_get_position,pos,\\g_overlay_id),",
        "prefix": "overlay_get_position",
        "scope": "python"
    },

    "overlay_obtain_focus": {
        "body": "(overlay_obtain_focus,\\g_overlay_id),",
        "prefix": "overlay_obtain_focus",
        "scope": "python"
    },

    "overlay_set_additional_render_height": {
        "body": "(overlay_set_additional_render_height,\\g_overlay_id,height_adder),",
        "prefix": "overlay_set_additional_render_height",
        "scope": "python"
    },

    "overlay_set_alpha": {
        "body": "(overlay_set_alpha,reg,0xAA),",
        "prefix": "overlay_set_alpha",
        "scope": "python"
    },

    "overlay_set_area_size": {
        "body": "(overlay_set_area_size,reg,pos),",
        "prefix": "overlay_set_area_size",
        "scope": "python"
    },

    "overlay_set_boundaries": {
        "body": "(overlay_set_boundaries,reg,min_value,max_value),",
        "prefix": "overlay_set_boundaries",
        "scope": "python"
    },

    "overlay_set_color": {
        "body": "(overlay_set_color,reg,0xRRGGBB),",
        "prefix": "overlay_set_color",
        "scope": "python"
    },

    "overlay_set_container_overlay": {
        "body": "(overlay_set_container_overlay,\\g_overlay_id,\\g_container_overlay_id),",
        "prefix": "overlay_set_container_overlay",
        "scope": "python"
    },

    "overlay_set_display": {
        "body": "(overlay_set_display,\\g_overlay_id,0),",
        "prefix": "overlay_set_display",
        "scope": "python"
    },

    "overlay_set_hilight_alpha": {
        "body": "(overlay_set_hilight_alpha,reg,0xAA),",
        "prefix": "overlay_set_hilight_alpha",
        "scope": "python"
    },

    "overlay_set_hilight_color": {
        "body": "(overlay_set_hilight_color,reg,0xRRGGBB),",
        "prefix": "overlay_set_hilight_color",
        "scope": "python"
    },

    "overlay_set_mesh_rotation": {
        "body": "(overlay_set_mesh_rotation,reg,pos),",
        "prefix": "overlay_set_mesh_rotation",
        "scope": "python"
    },

    "overlay_set_position": {
        "body": "(overlay_set_position,reg,pos),",
        "prefix": "overlay_set_position",
        "scope": "python"
    },

    "overlay_set_size": {
        "body": "(overlay_set_size,reg,pos),",
        "prefix": "overlay_set_size",
        "scope": "python"
    },

    "overlay_set_text": {
        "body": "(overlay_set_text,\\g_overlay_id,str_id),",
        "prefix": "overlay_set_text",
        "scope": "python"
    },

    "overlay_set_tooltip": {
        "body": "(overlay_set_tooltip,\\g_overlay_id,str_id),",
        "prefix": "overlay_set_tooltip",
        "scope": "python"
    },

    "overlay_set_val": {
        "body": "(overlay_set_val,reg,value),",
        "prefix": "overlay_set_val",
        "scope": "python"
    },

    "particle_system_add_new": {
        "body": "(particle_system_add_new,psys_particle_system_id,[position_no]),",
        "prefix": "particle_system_add_new",
        "scope": "python"
    },

    "particle_system_burst": {
        "body": "(particle_system_burst,psys_particle_system_id,pos,[percentage_burst_strength]),",
        "prefix": "particle_system_burst",
        "scope": "python"
    },

    "particle_system_burst_no_sync": {
        "body": "(particle_system_burst_no_sync,psys_particle_system_id,pos,[percentage_burst_strength]),",
        "prefix": "particle_system_burst_no_sync",
        "scope": "python"
    },

    "particle_system_emit": {
        "body": "(particle_system_emit,psys_particle_system_id,value_num_particles,value_period),",
        "prefix": "particle_system_emit",
        "scope": "python"
    },

    "party_add_leader": {
        "body": "(party_add_leader,party_id,trp_id),",
        "prefix": "party_add_leader",
        "scope": "python"
    },

    "party_add_members": {
        "body": "(party_add_members,party_id,trp_id,number),",
        "prefix": "party_add_members",
        "scope": "python"
    },

    "party_add_particle_system": {
        "body": "(party_add_particle_system,party_id,psys_id),",
        "prefix": "party_add_particle_system",
        "scope": "python"
    },

    "party_add_prisoners": {
        "body": "(party_add_prisoners,party_id,trp_id,number),",
        "prefix": "party_add_prisoners",
        "scope": "python"
    },

    "party_add_template": {
        "body": "(party_add_template,party_id,pt_id,[reverse_prisoner_status]),",
        "prefix": "party_add_template",
        "scope": "python"
    },

    "party_add_xp_to_stack": {
        "body": "(party_add_xp_to_stack,party_id,stack_no,xp_amount),",
        "prefix": "party_add_xp_to_stack",
        "scope": "python"
    },

    "party_attach_to_party": {
        "body": "(party_attach_to_party,party_id,party_idtoattachto),",
        "prefix": "party_attach_to_party",
        "scope": "python"
    },

    "party_can_join": {
        "body": "(party_can_join),",
        "prefix": "party_can_join",
        "scope": "python"
    },

    "party_can_join_as_prisoner": {
        "body": "(party_can_join_as_prisoner),",
        "prefix": "party_can_join_as_prisoner",
        "scope": "python"
    },

    "party_can_join_party": {
        "body": "(party_can_join_party,joiner_party_id,host_party_id,[flip_prisoners]),",
        "prefix": "party_can_join_party",
        "scope": "python"
    },

    "party_clear": {
        "body": "(party_clear,party_id),",
        "prefix": "party_clear",
        "scope": "python"
    },

    "party_clear_particle_systems": {
        "body": "(party_clear_particle_systems,party_id),",
        "prefix": "party_clear_particle_systems",
        "scope": "python"
    },

    "party_collect_attachments_to_party": {
        "body": "(party_collect_attachments_to_party,party_id,destinationparty_id),",
        "prefix": "party_collect_attachments_to_party",
        "scope": "python"
    },

    "party_count_companions_of_type": {
        "body": "(party_count_companions_of_type,destination,party_id,trp_id),",
        "prefix": "party_count_companions_of_type",
        "scope": "python"
    },

    "party_count_members_of_type": {
        "body": "(party_count_members_of_type,destination,party_id,trp_id),",
        "prefix": "party_count_members_of_type",
        "scope": "python"
    },

    "party_count_prisoners_of_type": {
        "body": "(party_count_prisoners_of_type,destination,party_id,trp_id),",
        "prefix": "party_count_prisoners_of_type",
        "scope": "python"
    },

    "party_detach": {
        "body": "(party_detach,party_id),",
        "prefix": "party_detach",
        "scope": "python"
    },

    "party_end_battle": {
        "body": "(party_end_battle,party_no),",
        "prefix": "party_end_battle",
        "scope": "python"
    },

    "party_force_add_members": {
        "body": "(party_force_add_members,party_id,trp_id,number),",
        "prefix": "party_force_add_members",
        "scope": "python"
    },

    "party_force_add_prisoners": {
        "body": "(party_force_add_prisoners,party_id,trp_id,number),",
        "prefix": "party_force_add_prisoners",
        "scope": "python"
    },

    "party_get_ai_initiative": {
        "body": "(party_get_ai_initiative,destination,party_id),",
        "prefix": "party_get_ai_initiative",
        "scope": "python"
    },

    "party_get_ai_target_position": {
        "body": "(party_get_ai_target_position,pos,party_id),",
        "prefix": "party_get_ai_target_position",
        "scope": "python"
    },

    "party_get_attached_party_with_rank": {
        "body": "(party_get_attached_party_with_rank,destination,party_id,attached_party_no),",
        "prefix": "party_get_attached_party_with_rank",
        "scope": "python"
    },

    "party_get_attached_to": {
        "body": "(party_get_attached_to,destination,party_id),",
        "prefix": "party_get_attached_to",
        "scope": "python"
    },

    "party_get_battle_opponent": {
        "body": "(party_get_battle_opponent,destination,party_id),",
        "prefix": "party_get_battle_opponent",
        "scope": "python"
    },

    "party_get_current_terrain": {
        "body": "(party_get_current_terrain,destination,party_id),",
        "prefix": "party_get_current_terrain",
        "scope": "python"
    },

    "party_get_cur_town": {
        "body": "(party_get_cur_town,destination,party_id),",
        "prefix": "party_get_cur_town",
        "scope": "python"
    },

    "party_get_free_companions_capacity": {
        "body": "(party_get_free_companions_capacity,destination,party_id),",
        "prefix": "party_get_free_companions_capacity",
        "scope": "python"
    },

    "party_get_helpfulness": {
        "body": "(party_get_helpfulness,destination,party_id),",
        "prefix": "party_get_helpfulness",
        "scope": "python"
    },

    "party_get_icon": {
        "body": "(party_get_icon,destination,party_id),",
        "prefix": "party_get_icon",
        "scope": "python"
    },

    "party_get_num_attached_parties": {
        "body": "(party_get_num_attached_parties,destination,party_id),",
        "prefix": "party_get_num_attached_parties",
        "scope": "python"
    },

    "party_get_num_companions": {
        "body": "(party_get_num_companions,destination,party_id),",
        "prefix": "party_get_num_companions",
        "scope": "python"
    },

    "party_get_num_companion_stacks": {
        "body": "(party_get_num_companion_stacks,destination,party_id),",
        "prefix": "party_get_num_companion_stacks",
        "scope": "python"
    },

    "party_get_num_prisoners": {
        "body": "(party_get_num_prisoners,destination,party_id),",
        "prefix": "party_get_num_prisoners",
        "scope": "python"
    },

    "party_get_num_prisoner_stacks": {
        "body": "(party_get_num_prisoner_stacks,destination,party_id),",
        "prefix": "party_get_num_prisoner_stacks",
        "scope": "python"
    },

    "party_get_position": {
        "body": "(party_get_position,pos,party_id),",
        "prefix": "party_get_position",
        "scope": "python"
    },

    "party_get_skill_level": {
        "body": "(party_get_skill_level,destination,party_id,skl_id),",
        "prefix": "party_get_skill_level",
        "scope": "python"
    },

    "party_get_slot": {
        "body": "(party_get_slot,destination,party_id,slot_no),",
        "prefix": "party_get_slot",
        "scope": "python"
    },

    "party_get_template_id": {
        "body": "(party_get_template_id,destination,party_id),",
        "prefix": "party_get_template_id",
        "scope": "python"
    },

    "party_ignore_player": {
        "body": "(party_ignore_player,party_id,duration_in_hours),",
        "prefix": "party_ignore_player",
        "scope": "python"
    },

    "party_is_active": {
        "body": "(party_is_active,party_id),",
        "prefix": "party_is_active",
        "scope": "python"
    },

    "party_is_in_any_town": {
        "body": "(party_is_in_any_town,party_id),",
        "prefix": "party_is_in_any_town",
        "scope": "python"
    },

    "party_is_in_town": {
        "body": "(party_is_in_town,party_id_,party_id_),",
        "prefix": "party_is_in_town",
        "scope": "python"
    },

    "party_join": {
        "body": "(party_join),",
        "prefix": "party_join",
        "scope": "python"
    },

    "party_join_as_prisoner": {
        "body": "(party_join_as_prisoner),",
        "prefix": "party_join_as_prisoner",
        "scope": "python"
    },

    "party_leave_cur_battle": {
        "body": "(party_leave_cur_battle,party_id),",
        "prefix": "party_leave_cur_battle",
        "scope": "python"
    },

    "party_prisoner_stack_get_size": {
        "body": "(party_prisoner_stack_get_size,destination,party_id,stack_no),",
        "prefix": "party_prisoner_stack_get_size",
        "scope": "python"
    },

    "party_prisoner_stack_get_troop_dna": {
        "body": "(party_prisoner_stack_get_troop_dna,destination,party_id,stack_no),",
        "prefix": "party_prisoner_stack_get_troop_dna",
        "scope": "python"
    },

    "party_prisoner_stack_get_troop_id": {
        "body": "(party_prisoner_stack_get_troop_id,destination,party_id,stack_no),",
        "prefix": "party_prisoner_stack_get_troop_id",
        "scope": "python"
    },

    "party_quick_attach_to_current_battle": {
        "body": "(party_quick_attach_to_current_battle,party_id,side(0playersside,enemyside)),",
        "prefix": "party_quick_attach_to_current_battle",
        "scope": "python"
    },

    "party_relocate_near_party": {
        "body": "(party_relocate_near_party,party_id,target_party_id,value_spawn_radius),",
        "prefix": "party_relocate_near_party",
        "scope": "python"
    },

    "party_remove_members": {
        "body": "(party_remove_members,party_id,trp_id,number),",
        "prefix": "party_remove_members",
        "scope": "python"
    },

    "party_remove_members_wounded_first": {
        "body": "(party_remove_members_wounded_first,party_id,trp_id,number),",
        "prefix": "party_remove_members_wounded_first",
        "scope": "python"
    },

    "party_remove_prisoners": {
        "body": "(party_remove_prisoners,party_id,trp_id,number),",
        "prefix": "party_remove_prisoners",
        "scope": "python"
    },

    "party_set_aggressiveness": {
        "body": "(party_set_aggressiveness,party_id,value),",
        "prefix": "party_set_aggressiveness",
        "scope": "python"
    },

    "party_set_ai_behavior": {
        "body": "(party_set_ai_behavior,party_id,ai_bhvr_id),",
        "prefix": "party_set_ai_behavior",
        "scope": "python"
    },

    "party_set_ai_initiative": {
        "body": "(party_set_ai_initiative,party_id,value),",
        "prefix": "party_set_ai_initiative",
        "scope": "python"
    },

    "party_set_ai_object": {
        "body": "(party_set_ai_object,party_id_,party_id_),",
        "prefix": "party_set_ai_object",
        "scope": "python"
    },

    "party_set_ai_patrol_radius": {
        "body": "(party_set_ai_patrol_radius,party_id,radius_in_km),",
        "prefix": "party_set_ai_patrol_radius",
        "scope": "python"
    },

    "party_set_ai_target_position": {
        "body": "(party_set_ai_target_position,party_id,pos),",
        "prefix": "party_set_ai_target_position",
        "scope": "python"
    },

    "party_set_bandit_attraction": {
        "body": "(party_set_bandit_attraction,party_id,attaraction),",
        "prefix": "party_set_bandit_attraction",
        "scope": "python"
    },

    "party_set_banner_icon": {
        "body": "(party_set_banner_icon,party_id,icon_id),",
        "prefix": "party_set_banner_icon",
        "scope": "python"
    },

    "party_set_courage": {
        "body": "(party_set_courage,party_id,value),",
        "prefix": "party_set_courage",
        "scope": "python"
    },

    "party_set_extra_icon": {
        "body": "(party_set_extra_icon,party_id,icon_id,up_down_distance_fixed_point,up_down_frequency_fixed_point,rotate_frequency_fixed_point,6fade_in_out_frequency_fixed_point),7",
        "prefix": "party_set_extra_icon",
        "scope": "python"
    },

    "party_set_extra_text": {
        "body": "(party_set_extra_text,party_id,str_id),",
        "prefix": "party_set_extra_text",
        "scope": "python"
    },

    "party_set_faction": {
        "body": "(party_set_faction,party_id,fac_id),",
        "prefix": "party_set_faction",
        "scope": "python"
    },

    "party_set_flags": {
        "body": "(party_set_flags,party_id,pf_flag,clear_or_set),",
        "prefix": "party_set_flags",
        "scope": "python"
    },

    "party_set_helpfulness": {
        "body": "(party_set_helpfulness,party_id,number),",
        "prefix": "party_set_helpfulness",
        "scope": "python"
    },

    "party_set_icon": {
        "body": "(party_set_icon,party_id,icon_id),",
        "prefix": "party_set_icon",
        "scope": "python"
    },

    "party_set_marshall": {
        "body": "(party_set_marshall,party_id,value),",
        "prefix": "party_set_marshall",
        "scope": "python"
    },

    "party_set_name": {
        "body": "(party_set_name,party_id,str_id),",
        "prefix": "party_set_name",
        "scope": "python"
    },

    "party_set_next_battle_simulation_time": {
        "body": "(party_set_next_battle_simulation_time,party_id,next_simulation_time_in_hours),",
        "prefix": "party_set_next_battle_simulation_time",
        "scope": "python"
    },

    "party_set_note_available": {
        "body": "(party_set_note_available,party_id,value),",
        "prefix": "party_set_note_available",
        "scope": "python"
    },

    "party_set_position": {
        "body": "(party_set_position,party_id,pos),",
        "prefix": "party_set_position",
        "scope": "python"
    },

    "party_set_slot": {
        "body": "(party_set_slot,party_id,slot_no,value),",
        "prefix": "party_set_slot",
        "scope": "python"
    },

    "party_slot_eq": {
        "body": "(party_slot_eq,party_id,slot_no,value),",
        "prefix": "party_slot_eq",
        "scope": "python"
    },

    "party_slot_ge": {
        "body": "(party_slot_ge,party_id,slot_no,value),",
        "prefix": "party_slot_ge",
        "scope": "python"
    },

    "party_stack_get_num_wounded": {
        "body": "(party_stack_get_num_wounded,destination,party_id,stack_no),",
        "prefix": "party_stack_get_num_wounded",
        "scope": "python"
    },

    "party_stack_get_size": {
        "body": "(party_stack_get_size,destination,party_id,stack_no),",
        "prefix": "party_stack_get_size",
        "scope": "python"
    },

    "party_stack_get_troop_dna": {
        "body": "(party_stack_get_troop_dna,destination,party_id,stack_no),",
        "prefix": "party_stack_get_troop_dna",
        "scope": "python"
    },

    "party_stack_get_troop_id": {
        "body": "(party_stack_get_troop_id,destination,party_id,stack_no),",
        "prefix": "party_stack_get_troop_id",
        "scope": "python"
    },

    "party_template_get_slot": {
        "body": "(party_template_get_slot,destination,party_template_id,slot_no),",
        "prefix": "party_template_get_slot",
        "scope": "python"
    },

    "party_template_set_slot": {
        "body": "(party_template_set_slot,party_template_id,slot_no,value),",
        "prefix": "party_template_set_slot",
        "scope": "python"
    },

    "party_template_slot_eq": {
        "body": "(party_template_slot_eq,party_template_id,slot_no,value),",
        "prefix": "party_template_slot_eq",
        "scope": "python"
    },

    "party_template_slot_ge": {
        "body": "(party_template_slot_ge,party_template_id,slot_no,value),",
        "prefix": "party_template_slot_ge",
        "scope": "python"
    },

    "party_wound_members": {
        "body": "(party_wound_members,party_id,trp_id,number),",
        "prefix": "party_wound_members",
        "scope": "python"
    },

    "player_add_spawn_item": {
        "body": "(player_add_spawn_item,player_id,item_slot_no,item_id),",
        "prefix": "player_add_spawn_item",
        "scope": "python"
    },

    "player_control_agent": {
        "body": "(player_control_agent,player_id,agent_id),",
        "prefix": "player_control_agent",
        "scope": "python"
    },

    "player_get_agent_id": {
        "body": "(player_get_agent_id,destination,player_id),",
        "prefix": "player_get_agent_id",
        "scope": "python"
    },

    "player_get_banner_id": {
        "body": "(player_get_banner_id,destination,player_id),",
        "prefix": "player_get_banner_id",
        "scope": "python"
    },

    "player_get_death_count": {
        "body": "(player_get_death_count,destination,player_id),",
        "prefix": "player_get_death_count",
        "scope": "python"
    },

    "player_get_gender": {
        "body": "(player_get_gender,destination,player_id),",
        "prefix": "player_get_gender",
        "scope": "python"
    },

    "player_get_gold": {
        "body": "(player_get_gold,destination,player_id),",
        "prefix": "player_get_gold",
        "scope": "python"
    },

    "player_get_is_muted": {
        "body": "(player_get_is_muted,destination,player_id),",
        "prefix": "player_get_is_muted",
        "scope": "python"
    },

    "player_get_item_id": {
        "body": "(player_get_item_id,destination,player_id,item_slot_no),",
        "prefix": "player_get_item_id",
        "scope": "python"
    },

    "player_get_kill_count": {
        "body": "(player_get_kill_count,destination,player_id),",
        "prefix": "player_get_kill_count",
        "scope": "python"
    },

    "player_get_ping": {
        "body": "(player_get_ping,destination,player_id),",
        "prefix": "player_get_ping",
        "scope": "python"
    },

    "player_get_score": {
        "body": "(player_get_score,destination,player_id),",
        "prefix": "player_get_score",
        "scope": "python"
    },

    "player_get_slot": {
        "body": "(player_get_slot,destination,player_id,slot_no),",
        "prefix": "player_get_slot",
        "scope": "python"
    },

    "player_get_team_no": {
        "body": "(player_get_team_no,destination,player_id),",
        "prefix": "player_get_team_no",
        "scope": "python"
    },

    "player_get_troop_id": {
        "body": "(player_get_troop_id,destination,player_id),",
        "prefix": "player_get_troop_id",
        "scope": "python"
    },

    "player_get_unique_id": {
        "body": "(player_get_unique_id,destination,player_id),",
        "prefix": "player_get_unique_id",
        "scope": "python"
    },

    "player_get_value_of_original_items": {
        "body": "(player_get_value_of_original_items,player_id),",
        "prefix": "player_get_value_of_original_items",
        "scope": "python"
    },

    "player_has_item": {
        "body": "(player_has_item,itm_id),",
        "prefix": "player_has_item",
        "scope": "python"
    },

    "player_is_active": {
        "body": "(player_is_active,player_id),",
        "prefix": "player_is_active",
        "scope": "python"
    },

    "player_is_admin": {
        "body": "(player_is_admin,player_id),",
        "prefix": "player_is_admin",
        "scope": "python"
    },

    "player_is_busy_with_menus": {
        "body": "(player_is_busy_with_menus,player_id),",
        "prefix": "player_is_busy_with_menus",
        "scope": "python"
    },

    "player_item_slot_is_picked_up": {
        "body": "(player_item_slot_is_picked_up,player_id,item_slot_no),",
        "prefix": "player_item_slot_is_picked_up",
        "scope": "python"
    },

    "player_save_picked_up_items_for_next_spawn": {
        "body": "(player_save_picked_up_items_for_next_spawn,player_id),",
        "prefix": "player_save_picked_up_items_for_next_spawn",
        "scope": "python"
    },

    "player_set_death_count": {
        "body": "(player_set_death_count,player_id,value),",
        "prefix": "player_set_death_count",
        "scope": "python"
    },

    "player_set_face_keys": {
        "body": "(player_set_face_keys,player_id,string_no),",
        "prefix": "player_set_face_keys",
        "scope": "python"
    },

    "player_set_gold": {
        "body": "(player_set_gold,player_id,value,max_value),",
        "prefix": "player_set_gold",
        "scope": "python"
    },

    "player_set_is_admin": {
        "body": "(player_set_is_admin,player_id,value),",
        "prefix": "player_set_is_admin",
        "scope": "python"
    },

    "player_set_is_muted": {
        "body": "(player_set_is_muted,player_id,value,[mute_for_everyone]),",
        "prefix": "player_set_is_muted",
        "scope": "python"
    },

    "player_set_kill_count": {
        "body": "(player_set_kill_count,player_id,value),",
        "prefix": "player_set_kill_count",
        "scope": "python"
    },

    "player_set_score": {
        "body": "(player_set_score,player_id,value),",
        "prefix": "player_set_score",
        "scope": "python"
    },

    "player_set_slot": {
        "body": "(player_set_slot,player_id,slot_no,value),",
        "prefix": "player_set_slot",
        "scope": "python"
    },

    "player_set_team_no": {
        "body": "(player_set_team_no,player_id,value),",
        "prefix": "player_set_team_no",
        "scope": "python"
    },

    "player_set_troop_id": {
        "body": "(player_set_troop_id,player_id,troop_id),",
        "prefix": "player_set_troop_id",
        "scope": "python"
    },

    "player_slot_eq": {
        "body": "(player_slot_eq,player_id,slot_no,value),",
        "prefix": "player_slot_eq",
        "scope": "python"
    },

    "player_slot_ge": {
        "body": "(player_slot_ge,player_id,slot_no,value),",
        "prefix": "player_slot_ge",
        "scope": "python"
    },

    "player_spawn_new_agent": {
        "body": "(player_spawn_new_agent,player_id,entry_point),",
        "prefix": "player_spawn_new_agent",
        "scope": "python"
    },

    "play_cue_track": {
        "body": "(play_cue_track,track_id),",
        "prefix": "play_cue_track",
        "scope": "python"
    },

    "play_sound": {
        "body": "(play_sound,snd_id,[options]),",
        "prefix": "play_sound",
        "scope": "python"
    },

    "play_sound_at_position": {
        "body": "(play_sound_at_position,snd_id,pos,[options]),",
        "prefix": "play_sound_at_position",
        "scope": "python"
    },

    "play_track": {
        "body": "(play_track,track_id,[options]),",
        "prefix": "play_track",
        "scope": "python"
    },

    "position_copy_origin": {
        "body": "(position_copy_origin,pos,pos),",
        "prefix": "position_copy_origin",
        "scope": "python"
    },

    "position_copy_rotation": {
        "body": "(position_copy_rotation,pos,pos),",
        "prefix": "position_copy_rotation",
        "scope": "python"
    },

    "position_get_distance_to_ground_level": {
        "body": "(position_get_distance_to_ground_level,destination,pos),",
        "prefix": "position_get_distance_to_ground_level",
        "scope": "python"
    },

    "position_get_distance_to_terrain": {
        "body": "(position_get_distance_to_terrain,destination,pos),",
        "prefix": "position_get_distance_to_terrain",
        "scope": "python"
    },

    "position_get_rotation_around_x": {
        "body": "(position_get_rotation_around_x,destination,pos),",
        "prefix": "position_get_rotation_around_x",
        "scope": "python"
    },

    "position_get_rotation_around_y": {
        "body": "(position_get_rotation_around_y,destination,pos),",
        "prefix": "position_get_rotation_around_y",
        "scope": "python"
    },

    "position_get_rotation_around_z": {
        "body": "(position_get_rotation_around_z,destination,pos),",
        "prefix": "position_get_rotation_around_z",
        "scope": "python"
    },

    "position_get_scale_x": {
        "body": "(position_get_scale_x,destination_fixed_point,pos),",
        "prefix": "position_get_scale_x",
        "scope": "python"
    },

    "position_get_scale_y": {
        "body": "(position_get_scale_y,destination_fixed_point,pos),",
        "prefix": "position_get_scale_y",
        "scope": "python"
    },

    "position_get_scale_z": {
        "body": "(position_get_scale_z,destination_fixed_point,pos),",
        "prefix": "position_get_scale_z",
        "scope": "python"
    },

    "position_get_screen_projection": {
        "body": "(position_get_screen_projection,pos,pos),",
        "prefix": "position_get_screen_projection",
        "scope": "python"
    },

    "position_get_x": {
        "body": "(position_get_x,destination_fixed_point,pos),",
        "prefix": "position_get_x",
        "scope": "python"
    },

    "position_get_y": {
        "body": "(position_get_y,destination_fixed_point,pos),",
        "prefix": "position_get_y",
        "scope": "python"
    },

    "position_get_z": {
        "body": "(position_get_z,destination_fixed_point,pos),",
        "prefix": "position_get_z",
        "scope": "python"
    },

    "position_has_line_of_sight_to_position": {
        "body": "(position_has_line_of_sight_to_position,pos,pos),",
        "prefix": "position_has_line_of_sight_to_position",
        "scope": "python"
    },

    "position_is_behind_position": {
        "body": "(position_is_behind_position,pos,pos),",
        "prefix": "position_is_behind_position",
        "scope": "python"
    },

    "position_move_x": {
        "body": "(position_move_x,pos,movement,0),",
        "prefix": "position_move_x",
        "scope": "python"
    },

    "position_move_y": {
        "body": "(position_move_y,pos,movement,0),",
        "prefix": "position_move_y",
        "scope": "python"
    },

    "position_move_z": {
        "body": "(position_move_z,pos,movement,0),",
        "prefix": "position_move_z",
        "scope": "python"
    },

    "position_normalize_origin": {
        "body": "(position_normalize_origin,destination_fixed_point,pos),",
        "prefix": "position_normalize_origin",
        "scope": "python"
    },

    "position_rotate_x": {
        "body": "(position_rotate_x,pos,angle),",
        "prefix": "position_rotate_x",
        "scope": "python"
    },

    "position_rotate_x_floating": {
        "body": "(position_rotate_x_floating,pos,angle),",
        "prefix": "position_rotate_x_floating",
        "scope": "python"
    },

    "position_rotate_y": {
        "body": "(position_rotate_y,pos,angle),",
        "prefix": "position_rotate_y",
        "scope": "python"
    },

    "position_rotate_y_floating": {
        "body": "(position_rotate_y_floating,pos,angle),",
        "prefix": "position_rotate_y_floating",
        "scope": "python"
    },

    "position_rotate_z": {
        "body": "(position_rotate_z,pos,angle,[use_global_z_axis]),",
        "prefix": "position_rotate_z",
        "scope": "python"
    },

    "position_set_scale_x": {
        "body": "(position_set_scale_x,pos,value_fixed_point),",
        "prefix": "position_set_scale_x",
        "scope": "python"
    },

    "position_set_scale_y": {
        "body": "(position_set_scale_y,pos,value_fixed_point),",
        "prefix": "position_set_scale_y",
        "scope": "python"
    },

    "position_set_scale_z": {
        "body": "(position_set_scale_z,pos,value_fixed_point),",
        "prefix": "position_set_scale_z",
        "scope": "python"
    },

    "position_set_x": {
        "body": "(position_set_x,pos,value_fixed_point),",
        "prefix": "position_set_x",
        "scope": "python"
    },

    "position_set_y": {
        "body": "(position_set_y,pos,value_fixed_point),",
        "prefix": "position_set_y",
        "scope": "python"
    },

    "position_set_z": {
        "body": "(position_set_z,pos,value_fixed_point),",
        "prefix": "position_set_z",
        "scope": "python"
    },

    "position_set_z_to_ground_level": {
        "body": "(position_set_z_to_ground_level,pos),",
        "prefix": "position_set_z_to_ground_level",
        "scope": "python"
    },

    "position_transform_position_to_local": {
        "body": "(position_transform_position_to_local,dest_position_no,position_no,position_no_to_be_transformed),",
        "prefix": "position_transform_position_to_local",
        "scope": "python"
    },

    "position_transform_position_to_parent": {
        "body": "(position_transform_position_to_parent,dest_position_no,position_no,position_no_to_be_transformed),",
        "prefix": "position_transform_position_to_parent",
        "scope": "python"
    },

    "presentation_set_duration": {
        "body": "(presentation_set_duration,999999),",
        "prefix": "presentation_set_duration",
        "scope": "python"
    },

    "profile_get_banner_id": {
        "body": "(profile_get_banner_id,destination),",
        "prefix": "profile_get_banner_id",
        "scope": "python"
    },

    "profile_set_banner_id": {
        "body": "(profile_set_banner_id,value),",
        "prefix": "profile_set_banner_id",
        "scope": "python"
    },

    "prop_instance_add_particle_system": {
        "body": "(prop_instance_add_particle_system,scene_prop_id,psys_id,pos),",
        "prefix": "prop_instance_add_particle_system",
        "scope": "python"
    },

    "prop_instance_animate_to_position": {
        "body": "(prop_instance_animate_to_position,scene_prop_id,pos,duration-in-/00-seconds),",
        "prefix": "prop_instance_animate_to_position",
        "scope": "python"
    },

    "prop_instance_clear_attached_missiles": {
        "body": "(prop_instance_clear_attached_missiles,scene_prop_id),",
        "prefix": "prop_instance_clear_attached_missiles",
        "scope": "python"
    },

    "prop_instance_deform_in_cycle_loop": {
        "body": "(prop_instance_deform_in_cycle_loop,prop_instance_no,start_frame,end_frame,duration-in-/000-seconds),",
        "prefix": "prop_instance_deform_in_cycle_loop",
        "scope": "python"
    },

    "prop_instance_deform_in_range": {
        "body": "(prop_instance_deform_in_range,prop_instance_no,start_frame,end_frame,duration-in-/000-seconds),",
        "prefix": "prop_instance_deform_in_range",
        "scope": "python"
    },

    "prop_instance_deform_to_time": {
        "body": "(prop_instance_deform_to_time,prop_instance_no,value),",
        "prefix": "prop_instance_deform_to_time",
        "scope": "python"
    },

    "prop_instance_dynamics_apply_impulse": {
        "body": "(prop_instance_dynamics_apply_impulse,scene_prop_id,impulse_force),",
        "prefix": "prop_instance_dynamics_apply_impulse",
        "scope": "python"
    },

    "prop_instance_dynamics_set_omega": {
        "body": "(prop_instance_dynamics_set_omega,scene_prop_id,angular_velocity),",
        "prefix": "prop_instance_dynamics_set_omega",
        "scope": "python"
    },

    "prop_instance_dynamics_set_properties": {
        "body": "(prop_instance_dynamics_set_properties,scene_prop_id,mass_friction),",
        "prefix": "prop_instance_dynamics_set_properties",
        "scope": "python"
    },

    "prop_instance_dynamics_set_velocity": {
        "body": "(prop_instance_dynamics_set_velocity,scene_prop_id,linear_velocity),",
        "prefix": "prop_instance_dynamics_set_velocity",
        "scope": "python"
    },

    "prop_instance_enable_physics": {
        "body": "(prop_instance_enable_physics,scene_prop_id,value0-),",
        "prefix": "prop_instance_enable_physics",
        "scope": "python"
    },

    "prop_instance_get_animation_target_position": {
        "body": "(prop_instance_get_animation_target_position,pos,scene_prop_id),",
        "prefix": "prop_instance_get_animation_target_position",
        "scope": "python"
    },

    "prop_instance_get_current_deform_frame": {
        "body": "(prop_instance_get_current_deform_frame,destination,prop_instance_no),",
        "prefix": "prop_instance_get_current_deform_frame",
        "scope": "python"
    },

    "prop_instance_get_current_deform_progress": {
        "body": "(prop_instance_get_current_deform_progress,destination,prop_instance_no),",
        "prefix": "prop_instance_get_current_deform_progress",
        "scope": "python"
    },

    "prop_instance_get_position": {
        "body": "(prop_instance_get_position,pos,scene_prop_id),",
        "prefix": "prop_instance_get_position",
        "scope": "python"
    },

    "prop_instance_get_scale": {
        "body": "(prop_instance_get_scale,pos,scene_prop_id),",
        "prefix": "prop_instance_get_scale",
        "scope": "python"
    },

    "prop_instance_get_scene_prop_kind": {
        "body": "(prop_instance_get_scene_prop_kind,destination,scene_prop_id),",
        "prefix": "prop_instance_get_scene_prop_kind",
        "scope": "python"
    },

    "prop_instance_get_starting_position": {
        "body": "(prop_instance_get_starting_position,pos,scene_prop_id),",
        "prefix": "prop_instance_get_starting_position",
        "scope": "python"
    },

    "prop_instance_get_variation_id": {
        "body": "(prop_instance_get_variation_id,destination,spr_id),",
        "prefix": "prop_instance_get_variation_id",
        "scope": "python"
    },

    "prop_instance_get_variation_id_2": {
        "body": "(prop_instance_get_variation_id_,destination,spr_id),",
        "prefix": "prop_instance_get_variation_id_2",
        "scope": "python"
    },

    "prop_instance_initialize_rotation_angles": {
        "body": "(prop_instance_initialize_rotation_angles,scene_prop_id),",
        "prefix": "prop_instance_initialize_rotation_angles",
        "scope": "python"
    },

    "prop_instance_intersects_with_prop_instance": {
        "body": "(prop_instance_intersects_with_prop_instance,scene_prop_id_,scene_prop_id_),",
        "prefix": "prop_instance_intersects_with_prop_instance",
        "scope": "python"
    },

    "prop_instance_is_animating": {
        "body": "(prop_instance_is_animating,destination,scene_prop_id),",
        "prefix": "prop_instance_is_animating",
        "scope": "python"
    },

    "prop_instance_is_valid": {
        "body": "(prop_instance_is_valid,spr_id),",
        "prefix": "prop_instance_is_valid",
        "scope": "python"
    },

    "prop_instance_play_sound": {
        "body": "(prop_instance_play_sound,scene_prop_id,snd_id,[flags]),",
        "prefix": "prop_instance_play_sound",
        "scope": "python"
    },

    "prop_instance_receive_damage": {
        "body": "(prop_instance_receive_damage,scene_prop_id,agent_id,damage_value),",
        "prefix": "prop_instance_receive_damage",
        "scope": "python"
    },

    "prop_instance_refill_hit_points": {
        "body": "(prop_instance_refill_hit_points,scene_prop_id),",
        "prefix": "prop_instance_refill_hit_points",
        "scope": "python"
    },

    "prop_instance_rotate_to_position": {
        "body": "(prop_instance_rotate_to_position,scene_prop_id,pos,duration-in-/00-seconds,total_rotate_angle),",
        "prefix": "prop_instance_rotate_to_position",
        "scope": "python"
    },

    "prop_instance_set_material": {
        "body": "(prop_instance_set_material,prop_instance_no,sub_mesh_no,s),",
        "prefix": "prop_instance_set_material",
        "scope": "python"
    },

    "prop_instance_set_position": {
        "body": "(prop_instance_set_position,scene_prop_id,pos,[dont_send_to_clients]),",
        "prefix": "prop_instance_set_position",
        "scope": "python"
    },

    "prop_instance_set_scale": {
        "body": "(prop_instance_set_scale,scene_prop_id,value_x_fixed_point,value_y_fixed_point,value_z_fixed_point),",
        "prefix": "prop_instance_set_scale",
        "scope": "python"
    },

    "prop_instance_stop_all_particle_systems": {
        "body": "(prop_instance_stop_all_particle_systems,scene_prop_id),",
        "prefix": "prop_instance_stop_all_particle_systems",
        "scope": "python"
    },

    "prop_instance_stop_animating": {
        "body": "(prop_instance_stop_animating,scene_prop_id),",
        "prefix": "prop_instance_stop_animating",
        "scope": "python"
    },

    "prop_instance_stop_sound": {
        "body": "(prop_instance_stop_sound,scene_prop_id),",
        "prefix": "prop_instance_stop_sound",
        "scope": "python"
    },

    "question_box": {
        "body": "(question_box,str_id,yes_string_id,no_string_id),",
        "prefix": "question_box",
        "scope": "python"
    },

    "quest_get_slot": {
        "body": "(quest_get_slot,destination,quest_id,slot_no),",
        "prefix": "quest_get_slot",
        "scope": "python"
    },

    "quest_set_note_available": {
        "body": "(quest_set_note_available,quest_id,value),",
        "prefix": "quest_set_note_available",
        "scope": "python"
    },

    "quest_set_slot": {
        "body": "(quest_set_slot,quest_id,slot_no,value),",
        "prefix": "quest_set_slot",
        "scope": "python"
    },

    "quest_slot_eq": {
        "body": "(quest_slot_eq,quest_id,slot_no,value),",
        "prefix": "quest_slot_eq",
        "scope": "python"
    },

    "quest_slot_ge": {
        "body": "(quest_slot_ge,quest_id,slot_no,value),",
        "prefix": "quest_slot_ge",
        "scope": "python"
    },

    "race_completed_by_player": {
        "body": "(race_completed_by_player),",
        "prefix": "race_completed_by_player",
        "scope": "python"
    },

    "rebuild_shadow_map": {
        "body": "(rebuild_shadow_map),",
        "prefix": "rebuild_shadow_map",
        "scope": "python"
    },

    "remove_agent": {
        "body": "(remove_agent,agent_id),",
        "prefix": "remove_agent",
        "scope": "python"
    },

    "remove_member_from_party": {
        "body": "(remove_member_from_party,trp_id,party_id),",
        "prefix": "remove_member_from_party",
        "scope": "python"
    },

    "remove_party": {
        "body": "(remove_party,party_id),",
        "prefix": "remove_party",
        "scope": "python"
    },

    "remove_regular_prisoners": {
        "body": "(remove_regular_prisoners,party_id),",
        "prefix": "remove_regular_prisoners",
        "scope": "python"
    },

    "remove_troops_from_companions": {
        "body": "(remove_troops_from_companions,trp_id,value),",
        "prefix": "remove_troops_from_companions",
        "scope": "python"
    },

    "remove_troops_from_prisoners": {
        "body": "(remove_troops_from_prisoners,trp_id,value),",
        "prefix": "remove_troops_from_prisoners",
        "scope": "python"
    },

    "remove_troop_from_site": {
        "body": "(remove_troop_from_site,trp_id,scene_id),",
        "prefix": "remove_troop_from_site",
        "scope": "python"
    },

    "replace_prop_instance": {
        "body": "(replace_prop_instance,scene_prop_id,new_scene_prop_id),",
        "prefix": "replace_prop_instance",
        "scope": "python"
    },

    "replace_scene_items_with_scene_props": {
        "body": "(replace_scene_items_with_scene_props,old_item_id,new_scene_prop_id),",
        "prefix": "replace_scene_items_with_scene_props",
        "scope": "python"
    },

    "replace_scene_props": {
        "body": "(replace_scene_props,old_scene_prop_id,new_scene_prop_id),",
        "prefix": "replace_scene_props",
        "scope": "python"
    },

    "reset_item_probabilities": {
        "body": "(reset_item_probabilities),",
        "prefix": "reset_item_probabilities",
        "scope": "python"
    },

    "reset_mission_timer_a": {
        "body": "(reset_mission_timer_a),",
        "prefix": "reset_mission_timer_a",
        "scope": "python"
    },

    "reset_mission_timer_b": {
        "body": "(reset_mission_timer_b),",
        "prefix": "reset_mission_timer_b",
        "scope": "python"
    },

    "reset_mission_timer_c": {
        "body": "(reset_mission_timer_c),",
        "prefix": "reset_mission_timer_c",
        "scope": "python"
    },

    "reset_price_rates": {
        "body": "(reset_price_rates),",
        "prefix": "reset_price_rates",
        "scope": "python"
    },

    "reset_visitors": {
        "body": "(reset_visitors),",
        "prefix": "reset_visitors",
        "scope": "python"
    },

    "rest_for_hours": {
        "body": "(rest_for_hours,rest_period,time_speed,remain_attackable),",
        "prefix": "rest_for_hours",
        "scope": "python"
    },

    "rest_for_hours_interactive": {
        "body": "(rest_for_hours_interactive,rest_period,time_speed,remain_attackable),",
        "prefix": "rest_for_hours_interactive",
        "scope": "python"
    },

    "save_ban_info_of_player": {
        "body": "(save_ban_info_of_player,player_id),",
        "prefix": "save_ban_info_of_player",
        "scope": "python"
    },

    "scene_allows_mounted_units": {
        "body": "(scene_allows_mounted_units),",
        "prefix": "scene_allows_mounted_units",
        "scope": "python"
    },

    "scene_get_slot": {
        "body": "(scene_get_slot,destination,scene_id,slot_no),",
        "prefix": "scene_get_slot",
        "scope": "python"
    },

    "scene_item_get_instance": {
        "body": "(scene_item_get_instance,destination,itm_id,instance_no),",
        "prefix": "scene_item_get_instance",
        "scope": "python"
    },

    "scene_item_get_num_instances": {
        "body": "(scene_item_get_num_instances,destination,itm_id),",
        "prefix": "scene_item_get_num_instances",
        "scope": "python"
    },

    "scene_prop_enable_after_time": {
        "body": "(scene_prop_enable_after_time,spr_id,value),",
        "prefix": "scene_prop_enable_after_time",
        "scope": "python"
    },

    "scene_prop_fade_in": {
        "body": "(scene_prop_fade_in,spr_id,fade_in_time),",
        "prefix": "scene_prop_fade_in",
        "scope": "python"
    },

    "scene_prop_fade_out": {
        "body": "(scene_prop_fade_out,spr_id,fade_out_time),",
        "prefix": "scene_prop_fade_out",
        "scope": "python"
    },

    "scene_prop_get_hit_points": {
        "body": "(scene_prop_get_hit_points,destination,spr_id),",
        "prefix": "scene_prop_get_hit_points",
        "scope": "python"
    },

    "scene_prop_get_instance": {
        "body": "(scene_prop_get_instance,destination,spr_id,instance_no),",
        "prefix": "scene_prop_get_instance",
        "scope": "python"
    },

    "scene_prop_get_max_hit_points": {
        "body": "(scene_prop_get_max_hit_points,destination,spr_id),",
        "prefix": "scene_prop_get_max_hit_points",
        "scope": "python"
    },

    "scene_prop_get_num_instances": {
        "body": "(scene_prop_get_num_instances,destination,spr_id),",
        "prefix": "scene_prop_get_num_instances",
        "scope": "python"
    },

    "scene_prop_get_slot": {
        "body": "(scene_prop_get_slot,destination,scene_prop_instance_id,slot_no),",
        "prefix": "scene_prop_get_slot",
        "scope": "python"
    },

    "scene_prop_get_team": {
        "body": "(scene_prop_get_team,destination,spr_id),",
        "prefix": "scene_prop_get_team",
        "scope": "python"
    },

    "scene_prop_get_visibility": {
        "body": "(scene_prop_get_visibility,destination,spr_id),",
        "prefix": "scene_prop_get_visibility",
        "scope": "python"
    },

    "scene_prop_has_agent_on_it": {
        "body": "(scene_prop_has_agent_on_it,spr_id,agent_id),",
        "prefix": "scene_prop_has_agent_on_it",
        "scope": "python"
    },

    "scene_prop_set_cur_hit_points": {
        "body": "(scene_prop_set_cur_hit_points,spr_id,value),",
        "prefix": "scene_prop_set_cur_hit_points",
        "scope": "python"
    },

    "scene_prop_set_hit_points": {
        "body": "(scene_prop_set_hit_points,spr_id,value),",
        "prefix": "scene_prop_set_hit_points",
        "scope": "python"
    },

    "scene_prop_set_prune_time": {
        "body": "(scene_prop_set_prune_time,spr_id,value),",
        "prefix": "scene_prop_set_prune_time",
        "scope": "python"
    },

    "scene_prop_set_slot": {
        "body": "(scene_prop_set_slot,scene_prop_instance_id,slot_no,value),",
        "prefix": "scene_prop_set_slot",
        "scope": "python"
    },

    "scene_prop_set_team": {
        "body": "(scene_prop_set_team,spr_id,value),",
        "prefix": "scene_prop_set_team",
        "scope": "python"
    },

    "scene_prop_set_visibility": {
        "body": "(scene_prop_set_visibility,scene_prop_instance,value),",
        "prefix": "scene_prop_set_visibility",
        "scope": "python"
    },

    "scene_prop_slot_eq": {
        "body": "(scene_prop_slot_eq,scene_prop_instance_id,slot_no,value),",
        "prefix": "scene_prop_slot_eq",
        "scope": "python"
    },

    "scene_prop_slot_ge": {
        "body": "(scene_prop_slot_ge,scene_prop_instance_id,slot_no,value),",
        "prefix": "scene_prop_slot_ge",
        "scope": "python"
    },

    "scene_set_day_time": {
        "body": "(scene_set_day_time,value),",
        "prefix": "scene_set_day_time",
        "scope": "python"
    },

    "scene_set_slot": {
        "body": "(scene_set_slot,scene_id,slot_no,value),",
        "prefix": "scene_set_slot",
        "scope": "python"
    },

    "scene_slot_eq": {
        "body": "(scene_slot_eq,scene_id,slot_no,value),",
        "prefix": "scene_slot_eq",
        "scope": "python"
    },

    "scene_slot_ge": {
        "body": "(scene_slot_ge,scene_id,slot_no,value),",
        "prefix": "scene_slot_ge",
        "scope": "python"
    },

    "scene_spawned_item_get_instance": {
        "body": "(scene_spawned_item_get_instance,destination,itm_id,instance_no),",
        "prefix": "scene_spawned_item_get_instance",
        "scope": "python"
    },

    "scene_spawned_item_get_num_instances": {
        "body": "(scene_spawned_item_get_num_instances,destination,itm_id),",
        "prefix": "scene_spawned_item_get_num_instances",
        "scope": "python"
    },

    "select_enemy": {
        "body": "(select_enemy,value),",
        "prefix": "select_enemy",
        "scope": "python"
    },

    "send_message_to_url": {
        "body": "(send_message_to_url,string_id,encode_url),",
        "prefix": "send_message_to_url",
        "scope": "python"
    },

    "server_add_message_to_log": {
        "body": "(server_add_message_to_log,string_id),",
        "prefix": "server_add_message_to_log",
        "scope": "python"
    },

    "server_get_add_to_game_servers_list": {
        "body": "(server_get_add_to_game_servers_list,destination),",
        "prefix": "server_get_add_to_game_servers_list",
        "scope": "python"
    },

    "server_get_anti_cheat": {
        "body": "(server_get_anti_cheat,destination),",
        "prefix": "server_get_anti_cheat",
        "scope": "python"
    },

    "server_get_changing_game_type_allowed": {
        "body": "(server_get_changing_game_type_allowed,destination),",
        "prefix": "server_get_changing_game_type_allowed",
        "scope": "python"
    },

    "server_get_combat_speed": {
        "body": "(server_get_combat_speed,destination),",
        "prefix": "server_get_combat_speed",
        "scope": "python"
    },

    "server_get_control_block_dir": {
        "body": "(server_get_control_block_dir,destination),",
        "prefix": "server_get_control_block_dir",
        "scope": "python"
    },

    "server_get_friendly_fire": {
        "body": "(server_get_friendly_fire,destination),",
        "prefix": "server_get_friendly_fire",
        "scope": "python"
    },

    "server_get_friendly_fire_damage_friend_ratio": {
        "body": "(server_get_friendly_fire_damage_friend_ratio,destination),",
        "prefix": "server_get_friendly_fire_damage_friend_ratio",
        "scope": "python"
    },

    "server_get_friendly_fire_damage_self_ratio": {
        "body": "(server_get_friendly_fire_damage_self_ratio,destination),",
        "prefix": "server_get_friendly_fire_damage_self_ratio",
        "scope": "python"
    },

    "server_get_ghost_mode": {
        "body": "(server_get_ghost_mode,destination),",
        "prefix": "server_get_ghost_mode",
        "scope": "python"
    },

    "server_get_max_num_players": {
        "body": "(server_get_max_num_players,destination),",
        "prefix": "server_get_max_num_players",
        "scope": "python"
    },

    "server_get_melee_friendly_fire": {
        "body": "(server_get_melee_friendly_fire,destination),",
        "prefix": "server_get_melee_friendly_fire",
        "scope": "python"
    },

    "server_get_renaming_server_allowed": {
        "body": "(server_get_renaming_server_allowed,destination),",
        "prefix": "server_get_renaming_server_allowed",
        "scope": "python"
    },

    "server_set_add_to_game_servers_list": {
        "body": "(server_set_add_to_game_servers_list,value),",
        "prefix": "server_set_add_to_game_servers_list",
        "scope": "python"
    },

    "server_set_anti_cheat": {
        "body": "(server_set_anti_cheat,value),",
        "prefix": "server_set_anti_cheat",
        "scope": "python"
    },

    "server_set_combat_speed": {
        "body": "(server_set_combat_speed,value),",
        "prefix": "server_set_combat_speed",
        "scope": "python"
    },

    "server_set_control_block_dir": {
        "body": "(server_set_control_block_dir,value),",
        "prefix": "server_set_control_block_dir",
        "scope": "python"
    },

    "server_set_friendly_fire": {
        "body": "(server_set_friendly_fire,value),",
        "prefix": "server_set_friendly_fire",
        "scope": "python"
    },

    "server_set_friendly_fire_damage_friend_ratio": {
        "body": "(server_set_friendly_fire_damage_friend_ratio,value),",
        "prefix": "server_set_friendly_fire_damage_friend_ratio",
        "scope": "python"
    },

    "server_set_friendly_fire_damage_self_ratio": {
        "body": "(server_set_friendly_fire_damage_self_ratio,value),",
        "prefix": "server_set_friendly_fire_damage_self_ratio",
        "scope": "python"
    },

    "server_set_ghost_mode": {
        "body": "(server_set_ghost_mode,value),",
        "prefix": "server_set_ghost_mode",
        "scope": "python"
    },

    "server_set_max_num_players": {
        "body": "(server_set_max_num_players,value),",
        "prefix": "server_set_max_num_players",
        "scope": "python"
    },

    "server_set_melee_friendly_fire": {
        "body": "(server_set_melee_friendly_fire,value),",
        "prefix": "server_set_melee_friendly_fire",
        "scope": "python"
    },

    "server_set_name": {
        "body": "(server_set_name,string_id),",
        "prefix": "server_set_name",
        "scope": "python"
    },

    "server_set_password": {
        "body": "(server_set_password,string_id),",
        "prefix": "server_set_password",
        "scope": "python"
    },

    "server_set_welcome_message": {
        "body": "(server_set_welcome_message,string_id),",
        "prefix": "server_set_welcome_message",
        "scope": "python"
    },

    "setup_quest_giver": {
        "body": "(setup_quest_giver,qst_id,str_id),",
        "prefix": "setup_quest_giver",
        "scope": "python"
    },

    "setup_quest_text": {
        "body": "(setup_quest_text,qst_id),",
        "prefix": "setup_quest_text",
        "scope": "python"
    },

    "set_achievement_stat": {
        "body": "(set_achievement_stat,achievement_id,stat_index,value),",
        "prefix": "set_achievement_stat",
        "scope": "python"
    },

    "set_background_mesh": {
        "body": "(set_background_mesh,mesh_id),",
        "prefix": "set_background_mesh",
        "scope": "python"
    },

    "set_battle_advantage": {
        "body": "(set_battle_advantage,value),",
        "prefix": "set_battle_advantage",
        "scope": "python"
    },

    "set_camera_follow_party": {
        "body": "(set_camera_follow_party,party_id),",
        "prefix": "set_camera_follow_party",
        "scope": "python"
    },

    "set_cheer_at_no_enemy": {
        "body": "(set_cheer_at_no_enemy,value0-),",
        "prefix": "set_cheer_at_no_enemy",
        "scope": "python"
    },

    "set_container_overlay": {
        "body": "(set_container_overlay,\\g_container_overlay_id),",
        "prefix": "set_container_overlay",
        "scope": "python"
    },

    "set_conversation_speaker_agent": {
        "body": "(set_conversation_speaker_agent,agent_id),",
        "prefix": "set_conversation_speaker_agent",
        "scope": "python"
    },

    "set_conversation_speaker_troop": {
        "body": "(set_conversation_speaker_troop,trp_id),",
        "prefix": "set_conversation_speaker_troop",
        "scope": "python"
    },

    "set_current_color": {
        "body": "(set_current_color,red0-,green0-,blue0-),",
        "prefix": "set_current_color",
        "scope": "python"
    },

    "set_encountered_party": {
        "body": "(set_encountered_party,party_id),",
        "prefix": "set_encountered_party",
        "scope": "python"
    },

    "set_fixed_point_multiplier": {
        "body": "(set_fixed_point_multiplier,value),",
        "prefix": "set_fixed_point_multiplier",
        "scope": "python"
    },

    "set_fog_distance": {
        "body": "(set_fog_distance,distance_in_meters,[0xRRGGBB]),",
        "prefix": "set_fog_distance",
        "scope": "python"
    },

    "set_game_menu_tableau_mesh": {
        "body": "(set_game_menu_tableau_mesh,tableau_material_id,value,pos),",
        "prefix": "set_game_menu_tableau_mesh",
        "scope": "python"
    },

    "set_global_cloud_amount": {
        "body": "(set_global_cloud_amount,value),",
        "prefix": "set_global_cloud_amount",
        "scope": "python"
    },

    "set_global_haze_amount": {
        "body": "(set_global_haze_amount,value),",
        "prefix": "set_global_haze_amount",
        "scope": "python"
    },

    "set_item_probability_in_merchandise": {
        "body": "(set_item_probability_in_merchandise,itm_id,value),",
        "prefix": "set_item_probability_in_merchandise",
        "scope": "python"
    },

    "set_jump_entry": {
        "body": "(set_jump_entry,entry_no),",
        "prefix": "set_jump_entry",
        "scope": "python"
    },

    "set_jump_mission": {
        "body": "(set_jump_mission,mt_mission_template_id),",
        "prefix": "set_jump_mission",
        "scope": "python"
    },

    "set_mercenary_source_party": {
        "body": "(set_mercenary_source_party,party_id),",
        "prefix": "set_mercenary_source_party",
        "scope": "python"
    },

    "set_merchandise_max_value": {
        "body": "(set_merchandise_max_value,value),",
        "prefix": "set_merchandise_max_value",
        "scope": "python"
    },

    "set_merchandise_modifier_quality": {
        "body": "(set_merchandise_modifier_quality,value),",
        "prefix": "set_merchandise_modifier_quality",
        "scope": "python"
    },

    "set_mission_result": {
        "body": "(set_mission_result,value),",
        "prefix": "set_mission_result",
        "scope": "python"
    },

    "set_party_battle_mode": {
        "body": "(set_party_battle_mode),",
        "prefix": "set_party_battle_mode",
        "scope": "python"
    },

    "set_party_creation_random_limits": {
        "body": "(set_party_creation_random_limits,min_value,max_value),",
        "prefix": "set_party_creation_random_limits",
        "scope": "python"
    },

    "set_passage_menu": {
        "body": "(set_passage_menu,value),",
        "prefix": "set_passage_menu",
        "scope": "python"
    },

    "set_player_troop": {
        "body": "(set_player_troop,troop_id),",
        "prefix": "set_player_troop",
        "scope": "python"
    },

    "set_position_delta": {
        "body": "(set_position_delta,x,y,z),",
        "prefix": "set_position_delta",
        "scope": "python"
    },

    "set_postfx": {
        "body": "(set_postfx),",
        "prefix": "set_postfx",
        "scope": "python"
    },

    "set_price_rate_for_item": {
        "body": "(set_price_rate_for_item,itm_id,value_percentage),",
        "prefix": "set_price_rate_for_item",
        "scope": "python"
    },

    "set_price_rate_for_item_type": {
        "body": "(set_price_rate_for_item_type,item_type_id,value_percentage),",
        "prefix": "set_price_rate_for_item_type",
        "scope": "python"
    },

    "set_quest_progression": {
        "body": "(set_quest_progression,qst_id,value),",
        "prefix": "set_quest_progression",
        "scope": "python"
    },

    "set_rain": {
        "body": "(set_rain,rain-type,strength0-00),",
        "prefix": "set_rain",
        "scope": "python"
    },

    "set_relation": {
        "body": "(set_relation,faction_id_,faction_id_,value),",
        "prefix": "set_relation",
        "scope": "python"
    },

    "set_result_string": {
        "body": "(set_result_string,string_id),",
        "prefix": "set_result_string",
        "scope": "python"
    },

    "set_river_shader_to_mud": {
        "body": "(set_river_shader_to_mud),",
        "prefix": "set_river_shader_to_mud",
        "scope": "python"
    },

    "set_shader_param_float": {
        "body": "(set_shader_param_float,parameter_name,value),",
        "prefix": "set_shader_param_float",
        "scope": "python"
    },

    "set_shader_param_float4": {
        "body": "(set_shader_param_float,parameter_name,value_x,value_y,value_z,value_w),6",
        "prefix": "set_shader_param_float4",
        "scope": "python"
    },

    "set_shader_param_float4x4": {
        "body": "(set_shader_param_floatx,parameter_name,[0][0],[0][],[0][],[][0],[][],[][],[][0],[][],[][],[][0],[][],[][]),",
        "prefix": "set_shader_param_float4x4",
        "scope": "python"
    },

    "set_shader_param_int": {
        "body": "(set_shader_param_int,parameter_name,value),",
        "prefix": "set_shader_param_int",
        "scope": "python"
    },

    "set_show_messages": {
        "body": "(set_show_messages,value),",
        "prefix": "set_show_messages",
        "scope": "python"
    },

    "set_skybox": {
        "body": "(set_skybox,non_hdr_skybox_index,hdr_skybox_index),",
        "prefix": "set_skybox",
        "scope": "python"
    },

    "set_spawn_effector_scene_prop_id": {
        "body": "(set_spawn_effector_scene_prop_id,scene_prop_id),",
        "prefix": "set_spawn_effector_scene_prop_id",
        "scope": "python"
    },

    "set_spawn_effector_scene_prop_kind": {
        "body": "(set_spawn_effector_scene_prop_kind,team_no,scene_prop_kind_no),",
        "prefix": "set_spawn_effector_scene_prop_kind",
        "scope": "python"
    },

    "set_spawn_position": {
        "body": "(set_spawn_position,pos),",
        "prefix": "set_spawn_position",
        "scope": "python"
    },

    "set_spawn_radius": {
        "body": "(set_spawn_radius,value),",
        "prefix": "set_spawn_radius",
        "scope": "python"
    },

    "set_startup_ambient_light": {
        "body": "(set_startup_ambient_light,red0-,green0-,blue0-),",
        "prefix": "set_startup_ambient_light",
        "scope": "python"
    },

    "set_startup_ground_ambient_light": {
        "body": "(set_startup_ground_ambient_light,red0-,green0-,blue0-),",
        "prefix": "set_startup_ground_ambient_light",
        "scope": "python"
    },

    "set_startup_sun_light": {
        "body": "(set_startup_sun_light,red0-,green0-,blue0-),",
        "prefix": "set_startup_sun_light",
        "scope": "python"
    },

    "set_tooltip_text": {
        "body": "(set_tooltip_text,str_id),",
        "prefix": "set_tooltip_text",
        "scope": "python"
    },

    "set_trigger_result": {
        "body": "(set_trigger_result,value),",
        "prefix": "set_trigger_result",
        "scope": "python"
    },

    "set_visitor": {
        "body": "(set_visitor,entry_no,trp_id,[dna]),",
        "prefix": "set_visitor",
        "scope": "python"
    },

    "set_visitors": {
        "body": "(set_visitors,entry_no,trp_id,number_of_troops),",
        "prefix": "set_visitors",
        "scope": "python"
    },

    "set_zoom_amount": {
        "body": "(set_zoom_amount,value_fixed_point),",
        "prefix": "set_zoom_amount",
        "scope": "python"
    },

    "show_item_details": {
        "body": "(show_item_details,itm_id,pos,show_default_text_or_not),",
        "prefix": "show_item_details",
        "scope": "python"
    },

    "show_item_details_with_modifier": {
        "body": "(show_item_details_with_modifier,itm_id,item_modifier,pos,show_default_text_or_not),",
        "prefix": "show_item_details_with_modifier",
        "scope": "python"
    },

    "show_object_details_overlay": {
        "body": "(show_object_details_overlay,value),",
        "prefix": "show_object_details_overlay",
        "scope": "python"
    },

    "show_troop_details": {
        "body": "(show_troop_details,trp_id,pos,troop_price),",
        "prefix": "show_troop_details",
        "scope": "python"
    },

    "shuffle_range": {
        "body": "(shuffle_range,reg_no,reg_no),",
        "prefix": "shuffle_range",
        "scope": "python"
    },

    "spawn_agent": {
        "body": "(spawn_agent,trp_troop_id),",
        "prefix": "spawn_agent",
        "scope": "python"
    },

    "spawn_around_party": {
        "body": "(spawn_around_party,party_id,party_template_id),",
        "prefix": "spawn_around_party",
        "scope": "python"
    },

    "spawn_horse": {
        "body": "(spawn_horse,item_kind_id,item_modifier),",
        "prefix": "spawn_horse",
        "scope": "python"
    },

    "spawn_item": {
        "body": "(spawn_item,item_kind_id,item_modifier,[seconds_before_pruning]),",
        "prefix": "spawn_item",
        "scope": "python"
    },

    "spawn_item_without_refill": {
        "body": "(spawn_item_without_refill,itm_item_kind_id,item_modifier,[seconds_before_pruning]),",
        "prefix": "spawn_item_without_refill",
        "scope": "python"
    },

    "spawn_scene_prop": {
        "body": "(spawn_scene_prop,spr_scene_prop_id),",
        "prefix": "spawn_scene_prop",
        "scope": "python"
    },

    "start_background_presentation": {
        "body": "(start_background_presentation,prsnt_id),",
        "prefix": "start_background_presentation",
        "scope": "python"
    },

    "start_encounter": {
        "body": "(start_encounter,party_id),",
        "prefix": "start_encounter",
        "scope": "python"
    },

    "start_map_conversation": {
        "body": "(start_map_conversation,troop_id),",
        "prefix": "start_map_conversation",
        "scope": "python"
    },

    "start_mission_conversation": {
        "body": "(start_mission_conversation,trp_id),",
        "prefix": "start_mission_conversation",
        "scope": "python"
    },

    "start_multiplayer_mission": {
        "body": "(start_multiplayer_mission,mission_template_id,scene_id,started_manually),",
        "prefix": "start_multiplayer_mission",
        "scope": "python"
    },

    "start_presentation": {
        "body": "(start_presentation,prsnt_id),",
        "prefix": "start_presentation",
        "scope": "python"
    },

    "start_quest": {
        "body": "(start_quest,qst_id,giver_troop_id),",
        "prefix": "start_quest",
        "scope": "python"
    },

    "stop_all_sounds": {
        "body": "(stop_all_sounds,[options]),",
        "prefix": "stop_all_sounds",
        "scope": "python"
    },

    "stop_sound_channel": {
        "body": "(stop_sound_channel,sound_channel_no),",
        "prefix": "stop_sound_channel",
        "scope": "python"
    },

    "store01_random_parties_in_range": {
        "body": "(store0_random_parties_in_range,lower_bound,upper_bound),",
        "prefix": "store01_random_parties_in_range",
        "scope": "python"
    },

    "store_acos": {
        "body": "(store_acos,destination_fixed_point,value_fixed_point),",
        "prefix": "store_acos",
        "scope": "python"
    },

    "store_add": {
        "body": "(store_add,destination,value_,value_),",
        "prefix": "store_add",
        "scope": "python"
    },

    "store_agent_hit_points": {
        "body": "(store_agent_hit_points,destination,agent_id,[absolute]),",
        "prefix": "store_agent_hit_points",
        "scope": "python"
    },

    "store_ally_count": {
        "body": "(store_ally_count,destination),",
        "prefix": "store_ally_count",
        "scope": "python"
    },

    "store_and": {
        "body": "(store_and,destination,value_,value_),",
        "prefix": "store_and",
        "scope": "python"
    },

    "store_asin": {
        "body": "(store_asin,destination_fixed_point,value_fixed_point),",
        "prefix": "store_asin",
        "scope": "python"
    },

    "store_atan": {
        "body": "(store_atan,destination_fixed_point,value_fixed_point),",
        "prefix": "store_atan",
        "scope": "python"
    },

    "store_atan2": {
        "body": "(store_atan,destination_fixed_point,y_value_fixed_point,x_value_fixed_point),",
        "prefix": "store_atan2",
        "scope": "python"
    },

    "store_attacker_count": {
        "body": "(store_attacker_count,destination),",
        "prefix": "store_attacker_count",
        "scope": "python"
    },

    "store_attribute_level": {
        "body": "(store_attribute_level,destination,trp_id,[ca_attribute_id]),",
        "prefix": "store_attribute_level",
        "scope": "python"
    },

    "store_character_level": {
        "body": "(store_character_level,destination,[troop_id]),",
        "prefix": "store_character_level",
        "scope": "python"
    },

    "store_conversation_agent": {
        "body": "(store_conversation_agent,destination),",
        "prefix": "store_conversation_agent",
        "scope": "python"
    },

    "store_conversation_troop": {
        "body": "(store_conversation_troop,destination),",
        "prefix": "store_conversation_troop",
        "scope": "python"
    },

    "store_cos": {
        "body": "(store_cos,destination_fixed_point,value_fixed_point),",
        "prefix": "store_cos",
        "scope": "python"
    },

    "store_current_day": {
        "body": "(store_current_day,destination),",
        "prefix": "store_current_day",
        "scope": "python"
    },

    "store_current_hours": {
        "body": "(store_current_hours,destination),",
        "prefix": "store_current_hours",
        "scope": "python"
    },

    "store_current_scene": {
        "body": "(store_current_scene,destination),",
        "prefix": "store_current_scene",
        "scope": "python"
    },

    "store_defender_count": {
        "body": "(store_defender_count,destination),",
        "prefix": "store_defender_count",
        "scope": "python"
    },

    "store_distance_to_party_from_party": {
        "body": "(store_distance_to_party_from_party,destination,party_id_,party_id_),",
        "prefix": "store_distance_to_party_from_party",
        "scope": "python"
    },

    "store_div": {
        "body": "(store_div,destination,value_,value_),",
        "prefix": "store_div",
        "scope": "python"
    },

    "store_encountered_party": {
        "body": "(store_encountered_party,destination),",
        "prefix": "store_encountered_party",
        "scope": "python"
    },

    "store_encountered_party2": {
        "body": "(store_encountered_party,destination),",
        "prefix": "store_encountered_party2",
        "scope": "python"
    },

    "store_enemy_count": {
        "body": "(store_enemy_count,destination),",
        "prefix": "store_enemy_count",
        "scope": "python"
    },

    "store_faction_of_party": {
        "body": "(store_faction_of_party,destination,party_id),",
        "prefix": "store_faction_of_party",
        "scope": "python"
    },

    "store_faction_of_troop": {
        "body": "(store_faction_of_troop,destination,trp_id),",
        "prefix": "store_faction_of_troop",
        "scope": "python"
    },

    "store_free_inventory_capacity": {
        "body": "(store_free_inventory_capacity,destination,[troop_id]),",
        "prefix": "store_free_inventory_capacity",
        "scope": "python"
    },

    "store_friend_count": {
        "body": "(store_friend_count,destination),",
        "prefix": "store_friend_count",
        "scope": "python"
    },

    "store_item_kind_count": {
        "body": "(store_item_kind_count,destination,itm_id,[troop_id]),",
        "prefix": "store_item_kind_count",
        "scope": "python"
    },

    "store_item_value": {
        "body": "(store_item_value,destination,itm_id),",
        "prefix": "store_item_value",
        "scope": "python"
    },

    "store_last_sound_channel": {
        "body": "(store_last_sound_channel,destination),",
        "prefix": "store_last_sound_channel",
        "scope": "python"
    },

    "store_mission_timer_a": {
        "body": "(store_mission_timer_a,destination),",
        "prefix": "store_mission_timer_a",
        "scope": "python"
    },

    "store_mission_timer_a_msec": {
        "body": "(store_mission_timer_a_msec,destination),",
        "prefix": "store_mission_timer_a_msec",
        "scope": "python"
    },

    "store_mission_timer_b": {
        "body": "(store_mission_timer_b,destination),",
        "prefix": "store_mission_timer_b",
        "scope": "python"
    },

    "store_mission_timer_b_msec": {
        "body": "(store_mission_timer_b_msec,destination),",
        "prefix": "store_mission_timer_b_msec",
        "scope": "python"
    },

    "store_mission_timer_c": {
        "body": "(store_mission_timer_c,destination),",
        "prefix": "store_mission_timer_c",
        "scope": "python"
    },

    "store_mission_timer_c_msec": {
        "body": "(store_mission_timer_c_msec,destination),",
        "prefix": "store_mission_timer_c_msec",
        "scope": "python"
    },

    "store_mod": {
        "body": "(store_mod,destination,value_,value_),",
        "prefix": "store_mod",
        "scope": "python"
    },

    "store_mul": {
        "body": "(store_mul,destination,value_,value_),",
        "prefix": "store_mul",
        "scope": "python"
    },

    "store_normalized_team_count": {
        "body": "(store_normalized_team_count,destination,team_no),",
        "prefix": "store_normalized_team_count",
        "scope": "python"
    },

    "store_num_free_prisoner_stacks": {
        "body": "(store_num_free_prisoner_stacks,destination,party_id),",
        "prefix": "store_num_free_prisoner_stacks",
        "scope": "python"
    },

    "store_num_free_stacks": {
        "body": "(store_num_free_stacks,destination,party_id),",
        "prefix": "store_num_free_stacks",
        "scope": "python"
    },

    "store_num_parties_created": {
        "body": "(store_num_parties_created,destination,pt_party_template_id),",
        "prefix": "store_num_parties_created",
        "scope": "python"
    },

    "store_num_parties_destroyed": {
        "body": "(store_num_parties_destroyed,destination,pt_party_template_id),",
        "prefix": "store_num_parties_destroyed",
        "scope": "python"
    },

    "store_num_parties_destroyed_by_player": {
        "body": "(store_num_parties_destroyed_by_player,destination,pt_party_template_id),",
        "prefix": "store_num_parties_destroyed_by_player",
        "scope": "python"
    },

    "store_num_parties_of_template": {
        "body": "(store_num_parties_of_template,destination,pt_party_template_id),",
        "prefix": "store_num_parties_of_template",
        "scope": "python"
    },

    "store_num_regular_prisoners": {
        "body": "(store_num_regular_prisoners,destination,party_id),",
        "prefix": "store_num_regular_prisoners",
        "scope": "python"
    },

    "store_or": {
        "body": "(store_or,destination,value_,value_),",
        "prefix": "store_or",
        "scope": "python"
    },

    "store_partner_faction": {
        "body": "(store_partner_faction,destination),",
        "prefix": "store_partner_faction",
        "scope": "python"
    },

    "store_partner_quest": {
        "body": "(store_partner_quest,destination),",
        "prefix": "store_partner_quest",
        "scope": "python"
    },

    "store_party_size": {
        "body": "(store_party_size,destination,[party_id]),",
        "prefix": "store_party_size",
        "scope": "python"
    },

    "store_party_size_wo_prisoners": {
        "body": "(store_party_size_wo_prisoners,destination,[party_id]),",
        "prefix": "store_party_size_wo_prisoners",
        "scope": "python"
    },

    "store_pow": {
        "body": "(store_pow,destination_fixed_point,value_fixed_point,value_fixed_point),",
        "prefix": "store_pow",
        "scope": "python"
    },

    "store_proficiency_level": {
        "body": "(store_proficiency_level,destination,trp_id,wpt_proficiency_id),",
        "prefix": "store_proficiency_level",
        "scope": "python"
    },

    "store_quest_item": {
        "body": "(store_quest_item,destination,itm_id),",
        "prefix": "store_quest_item",
        "scope": "python"
    },

    "store_quest_number": {
        "body": "(store_quest_number,destination,qst_quest_id),",
        "prefix": "store_quest_number",
        "scope": "python"
    },

    "store_quest_troop": {
        "body": "(store_quest_troop,destination,trp_id),",
        "prefix": "store_quest_troop",
        "scope": "python"
    },

    "store_random_armor": {
        "body": "(store_random_armor,destination),",
        "prefix": "store_random_armor",
        "scope": "python"
    },

    "store_random_equipment": {
        "body": "(store_random_equipment,destination),",
        "prefix": "store_random_equipment",
        "scope": "python"
    },

    "store_random_horse": {
        "body": "(store_random_horse,destination),",
        "prefix": "store_random_horse",
        "scope": "python"
    },

    "store_random_in_range": {
        "body": "(store_random_in_range,destination,range_low,range_high),",
        "prefix": "store_random_in_range",
        "scope": "python"
    },

    "store_random_party_in_range": {
        "body": "(store_random_party_in_range,destination,lower_bound,upper_bound),",
        "prefix": "store_random_party_in_range",
        "scope": "python"
    },

    "store_random_party_of_template": {
        "body": "(store_random_party_of_template,destination,pt_party_template_id),",
        "prefix": "store_random_party_of_template",
        "scope": "python"
    },

    "store_random_quest_in_range": {
        "body": "(store_random_quest_in_range,destination,lower_bound,upper_bound),",
        "prefix": "store_random_quest_in_range",
        "scope": "python"
    },

    "store_random_troop_to_capture": {
        "body": "(store_random_troop_to_capture,destination,lower_bound,upper_bound),",
        "prefix": "store_random_troop_to_capture",
        "scope": "python"
    },

    "store_random_troop_to_raise": {
        "body": "(store_random_troop_to_raise,destination,lower_bound,upper_bound),",
        "prefix": "store_random_troop_to_raise",
        "scope": "python"
    },

    "store_relation": {
        "body": "(store_relation,destination,fac_faction_id_,fac_faction_id_),",
        "prefix": "store_relation",
        "scope": "python"
    },

    "store_remaining_team_no": {
        "body": "(store_remaining_team_no,destination),",
        "prefix": "store_remaining_team_no",
        "scope": "python"
    },

    "store_repeat_object": {
        "body": "(store_repeat_object,destination),",
        "prefix": "store_repeat_object",
        "scope": "python"
    },

    "store_script_param": {
        "body": "(store_script_param,destination,),",
        "prefix": "store_script_param",
        "scope": "python"
    },

    "store_script_param_1": {
        "body": "(store_script_param_,destination),",
        "prefix": "store_script_param_1",
        "scope": "python"
    },

    "store_script_param_2": {
        "body": "(store_script_param_,destination),",
        "prefix": "store_script_param_2",
        "scope": "python"
    },

    "store_sin": {
        "body": "(store_sin,destination_fixed_point,value_fixed_point),",
        "prefix": "store_sin",
        "scope": "python"
    },

    "store_skill_level": {
        "body": "(store_skill_level,destination,skl_skill_id,[troop_id]),",
        "prefix": "store_skill_level",
        "scope": "python"
    },

    "store_sqrt": {
        "body": "(store_sqrt,destination_fixed_point,value_fixed_point),",
        "prefix": "store_sqrt",
        "scope": "python"
    },

    "store_sub": {
        "body": "(store_sub,destination,value_,value_),",
        "prefix": "store_sub",
        "scope": "python"
    },

    "store_tan": {
        "body": "(store_tan,destination_fixed_point,value_fixed_point),",
        "prefix": "store_tan",
        "scope": "python"
    },

    "store_time_of_day": {
        "body": "(store_time_of_day,destination),",
        "prefix": "store_time_of_day",
        "scope": "python"
    },

    "store_trigger_param": {
        "body": "(store_trigger_param,destination,trigger_param_no),",
        "prefix": "store_trigger_param",
        "scope": "python"
    },

    "store_trigger_param_1": {
        "body": "(store_trigger_param_,destination),",
        "prefix": "store_trigger_param_1",
        "scope": "python"
    },

    "store_trigger_param_2": {
        "body": "(store_trigger_param_,destination),",
        "prefix": "store_trigger_param_2",
        "scope": "python"
    },

    "store_trigger_param_3": {
        "body": "(store_trigger_param_,destination),",
        "prefix": "store_trigger_param_3",
        "scope": "python"
    },

    "store_troop_count_companions": {
        "body": "(store_troop_count_companions,destination,troop_id,[party_id]),",
        "prefix": "store_troop_count_companions",
        "scope": "python"
    },

    "store_troop_count_prisoners": {
        "body": "(store_troop_count_prisoners,destination,troop_id,[party_id]),",
        "prefix": "store_troop_count_prisoners",
        "scope": "python"
    },

    "store_troop_faction": {
        "body": "(store_troop_faction,destination,trp_id),",
        "prefix": "store_troop_faction",
        "scope": "python"
    },

    "store_troop_gold": {
        "body": "(store_troop_gold,destination,trp_id),",
        "prefix": "store_troop_gold",
        "scope": "python"
    },

    "store_troop_health": {
        "body": "(store_troop_health,destination,trp_id,[absolute]),",
        "prefix": "store_troop_health",
        "scope": "python"
    },

    "store_troop_value": {
        "body": "(store_troop_value,destination,trp_id),",
        "prefix": "store_troop_value",
        "scope": "python"
    },

    "store_zoom_amount": {
        "body": "(store_zoom_amount,destination_fixed_point),",
        "prefix": "store_zoom_amount",
        "scope": "python"
    },

    "str_clear": {
        "body": "(str_clear,s),",
        "prefix": "str_clear",
        "scope": "python"
    },

    "str_encode_url": {
        "body": "(str_encode_url,s),",
        "prefix": "str_encode_url",
        "scope": "python"
    },

    "str_is_empty": {
        "body": "(str_is_empty,s),",
        "prefix": "str_is_empty",
        "scope": "python"
    },

    "str_store_agent_name": {
        "body": "(str_store_agent_name,s,agent_id),",
        "prefix": "str_store_agent_name",
        "scope": "python"
    },

    "str_store_class_name": {
        "body": "(str_store_class_name,s,class_id),",
        "prefix": "str_store_class_name",
        "scope": "python"
    },

    "str_store_date": {
        "body": "(str_store_date,s,number_of_hours_to_add_to_the_current_date),",
        "prefix": "str_store_date",
        "scope": "python"
    },

    "str_store_faction_name": {
        "body": "(str_store_faction_name,s,faction_id),",
        "prefix": "str_store_faction_name",
        "scope": "python"
    },

    "str_store_faction_name_link": {
        "body": "(str_store_faction_name_link,s,faction_id),",
        "prefix": "str_store_faction_name_link",
        "scope": "python"
    },

    "str_store_info_page_name": {
        "body": "(str_store_info_page_name,s,info_page_id),",
        "prefix": "str_store_info_page_name",
        "scope": "python"
    },

    "str_store_info_page_name_link": {
        "body": "(str_store_info_page_name_link,s,info_page_id),",
        "prefix": "str_store_info_page_name_link",
        "scope": "python"
    },

    "str_store_item_name": {
        "body": "(str_store_item_name,s,itm_id),",
        "prefix": "str_store_item_name",
        "scope": "python"
    },

    "str_store_item_name_by_count": {
        "body": "(str_store_item_name_by_count,s,itm_id,number),",
        "prefix": "str_store_item_name_by_count",
        "scope": "python"
    },

    "str_store_item_name_plural": {
        "body": "(str_store_item_name_plural,s,itm_id),",
        "prefix": "str_store_item_name_plural",
        "scope": "python"
    },

    "str_store_party_name": {
        "body": "(str_store_party_name,s,party_id),",
        "prefix": "str_store_party_name",
        "scope": "python"
    },

    "str_store_party_name_link": {
        "body": "(str_store_party_name_link,s,party_id),",
        "prefix": "str_store_party_name_link",
        "scope": "python"
    },

    "str_store_player_face_keys": {
        "body": "(str_store_player_face_keys,string_no,player_id),",
        "prefix": "str_store_player_face_keys",
        "scope": "python"
    },

    "str_store_player_username": {
        "body": "(str_store_player_username,s,player_id),",
        "prefix": "str_store_player_username",
        "scope": "python"
    },

    "str_store_quest_name": {
        "body": "(str_store_quest_name,s,quest_id),",
        "prefix": "str_store_quest_name",
        "scope": "python"
    },

    "str_store_quest_name_link": {
        "body": "(str_store_quest_name_link,s,quest_id),",
        "prefix": "str_store_quest_name_link",
        "scope": "python"
    },

    "str_store_server_name": {
        "body": "(str_store_server_name,s),",
        "prefix": "str_store_server_name",
        "scope": "python"
    },

    "str_store_server_password": {
        "body": "(str_store_server_password,s),",
        "prefix": "str_store_server_password",
        "scope": "python"
    },

    "str_store_string": {
        "body": "(str_store_string,s,str_id),",
        "prefix": "str_store_string",
        "scope": "python"
    },

    "str_store_string_reg": {
        "body": "(str_store_string_reg,s,string_no),",
        "prefix": "str_store_string_reg",
        "scope": "python"
    },

    "str_store_troop_face_keys": {
        "body": "(str_store_troop_face_keys,string_no,troop_no,[alt]),",
        "prefix": "str_store_troop_face_keys",
        "scope": "python"
    },

    "str_store_troop_name": {
        "body": "(str_store_troop_name,s,trp_id),",
        "prefix": "str_store_troop_name",
        "scope": "python"
    },

    "str_store_troop_name_by_count": {
        "body": "(str_store_troop_name_by_count,s,trp_id,number),",
        "prefix": "str_store_troop_name_by_count",
        "scope": "python"
    },

    "str_store_troop_name_link": {
        "body": "(str_store_troop_name_link,s,troop_id),",
        "prefix": "str_store_troop_name_link",
        "scope": "python"
    },

    "str_store_troop_name_plural": {
        "body": "(str_store_troop_name_plural,s,trp_id),",
        "prefix": "str_store_troop_name_plural",
        "scope": "python"
    },

    "str_store_welcome_message": {
        "body": "(str_store_welcome_message,s),",
        "prefix": "str_store_welcome_message",
        "scope": "python"
    },

    "succeed_quest": {
        "body": "(succeed_quest,qst_id),",
        "prefix": "succeed_quest",
        "scope": "python"
    },

    "talk_info_set_line": {
        "body": "(talk_info_set_line,line_no,str_id),",
        "prefix": "talk_info_set_line",
        "scope": "python"
    },

    "talk_info_set_relation_bar": {
        "body": "(talk_info_set_relation_bar,value),",
        "prefix": "talk_info_set_relation_bar",
        "scope": "python"
    },

    "talk_info_show": {
        "body": "(talk_info_show,hide_or_show0-),",
        "prefix": "talk_info_show",
        "scope": "python"
    },

    "teams_are_enemies": {
        "body": "(teams_are_enemies,team_no_,team_no_),",
        "prefix": "teams_are_enemies",
        "scope": "python"
    },

    "team_get_bot_death_count": {
        "body": "(team_get_bot_death_count,destination,team_id),",
        "prefix": "team_get_bot_death_count",
        "scope": "python"
    },

    "team_get_bot_kill_count": {
        "body": "(team_get_bot_kill_count,destination,team_id),",
        "prefix": "team_get_bot_kill_count",
        "scope": "python"
    },

    "team_get_faction": {
        "body": "(team_get_faction,destination,team_id),",
        "prefix": "team_get_faction",
        "scope": "python"
    },

    "team_get_gap_distance": {
        "body": "(team_get_gap_distance,destination,team_no,sub_class),",
        "prefix": "team_get_gap_distance",
        "scope": "python"
    },

    "team_get_hold_fire_order": {
        "body": "(team_get_hold_fire_order,destination,team_no,sub_class),",
        "prefix": "team_get_hold_fire_order",
        "scope": "python"
    },

    "team_get_kill_count": {
        "body": "(team_get_kill_count,destination,team_id),",
        "prefix": "team_get_kill_count",
        "scope": "python"
    },

    "team_get_leader": {
        "body": "(team_get_leader,destination,team_no),",
        "prefix": "team_get_leader",
        "scope": "python"
    },

    "team_get_movement_order": {
        "body": "(team_get_movement_order,destination,team_no,sub_class),",
        "prefix": "team_get_movement_order",
        "scope": "python"
    },

    "team_get_order_position": {
        "body": "(team_get_order_position,pos,team_no,sub_class),",
        "prefix": "team_get_order_position",
        "scope": "python"
    },

    "team_get_riding_order": {
        "body": "(team_get_riding_order,destination,team_no,sub_class),",
        "prefix": "team_get_riding_order",
        "scope": "python"
    },

    "team_get_score": {
        "body": "(team_get_score,destination,team_id),",
        "prefix": "team_get_score",
        "scope": "python"
    },

    "team_get_slot": {
        "body": "(team_get_slot,destination,team_id,slot_no),",
        "prefix": "team_get_slot",
        "scope": "python"
    },

    "team_get_weapon_usage_order": {
        "body": "(team_get_weapon_usage_order,destination,team_no,sub_class),",
        "prefix": "team_get_weapon_usage_order",
        "scope": "python"
    },

    "team_give_order": {
        "body": "(team_give_order,team_no,sub_class,mordr_order_id),",
        "prefix": "team_give_order",
        "scope": "python"
    },

    "team_set_bot_death_count": {
        "body": "(team_set_bot_death_count,team_id,value),",
        "prefix": "team_set_bot_death_count",
        "scope": "python"
    },

    "team_set_bot_kill_count": {
        "body": "(team_set_bot_kill_count,team_id,value),",
        "prefix": "team_set_bot_kill_count",
        "scope": "python"
    },

    "team_set_faction": {
        "body": "(team_set_faction,team_id,faction_id),",
        "prefix": "team_set_faction",
        "scope": "python"
    },

    "team_set_leader": {
        "body": "(team_set_leader,team_no,new_leader_agent_id),",
        "prefix": "team_set_leader",
        "scope": "python"
    },

    "team_set_order_listener": {
        "body": "(team_set_order_listener,team_no,sub_class,value),",
        "prefix": "team_set_order_listener",
        "scope": "python"
    },

    "team_set_order_position": {
        "body": "(team_set_order_position,team_no,sub_class,pos),",
        "prefix": "team_set_order_position",
        "scope": "python"
    },

    "team_set_relation": {
        "body": "(team_set_relation,team_no_,team_no_,value),",
        "prefix": "team_set_relation",
        "scope": "python"
    },

    "team_set_score": {
        "body": "(team_set_score,team_id,value),",
        "prefix": "team_set_score",
        "scope": "python"
    },

    "team_set_slot": {
        "body": "(team_set_slot,team_id,slot_no,value),",
        "prefix": "team_set_slot",
        "scope": "python"
    },

    "team_slot_eq": {
        "body": "(team_slot_eq,team_id,slot_no,value),",
        "prefix": "team_slot_eq",
        "scope": "python"
    },

    "team_slot_ge": {
        "body": "(team_slot_ge,team_id,slot_no,value),",
        "prefix": "team_slot_ge",
        "scope": "python"
    },

    "troops_can_join": {
        "body": "(troops_can_join,value),",
        "prefix": "troops_can_join",
        "scope": "python"
    },

    "troops_can_join_as_prisoner": {
        "body": "(troops_can_join_as_prisoner,value),",
        "prefix": "troops_can_join_as_prisoner",
        "scope": "python"
    },

    "troop_add_gold": {
        "body": "(troop_add_gold,trp_id,value),",
        "prefix": "troop_add_gold",
        "scope": "python"
    },

    "troop_add_item": {
        "body": "(troop_add_item,trp_id,itm_id,[modifier]),",
        "prefix": "troop_add_item",
        "scope": "python"
    },

    "troop_add_items": {
        "body": "(troop_add_items,trp_id,itm_id,number),",
        "prefix": "troop_add_items",
        "scope": "python"
    },

    "troop_add_merchandise": {
        "body": "(troop_add_merchandise,trp_id,item_type_id,value),",
        "prefix": "troop_add_merchandise",
        "scope": "python"
    },

    "troop_add_merchandise_with_faction": {
        "body": "(troop_add_merchandise_with_faction,trp_id,fac_id,itp_type_id,value),",
        "prefix": "troop_add_merchandise_with_faction",
        "scope": "python"
    },

    "troop_add_proficiency_points": {
        "body": "(troop_add_proficiency_points,trp_id,value),",
        "prefix": "troop_add_proficiency_points",
        "scope": "python"
    },

    "troop_clear_inventory": {
        "body": "(troop_clear_inventory,trp_id),",
        "prefix": "troop_clear_inventory",
        "scope": "python"
    },

    "troop_ensure_inventory_space": {
        "body": "(troop_ensure_inventory_space,trp_id,value),",
        "prefix": "troop_ensure_inventory_space",
        "scope": "python"
    },

    "troop_equip_items": {
        "body": "(troop_equip_items,trp_id),",
        "prefix": "troop_equip_items",
        "scope": "python"
    },

    "troop_get_class": {
        "body": "(troop_get_class,destination,trp_id),",
        "prefix": "troop_get_class",
        "scope": "python"
    },

    "troop_get_inventory_capacity": {
        "body": "(troop_get_inventory_capacity,destination,trp_id),",
        "prefix": "troop_get_inventory_capacity",
        "scope": "python"
    },

    "troop_get_inventory_slot": {
        "body": "(troop_get_inventory_slot,destination,trp_id,inventory_slot_no),",
        "prefix": "troop_get_inventory_slot",
        "scope": "python"
    },

    "troop_get_inventory_slot_modifier": {
        "body": "(troop_get_inventory_slot_modifier,destination,trp_id,inventory_slot_no),",
        "prefix": "troop_get_inventory_slot_modifier",
        "scope": "python"
    },

    "troop_get_slot": {
        "body": "(troop_get_slot,destination,troop_id,slot_no),",
        "prefix": "troop_get_slot",
        "scope": "python"
    },

    "troop_get_type": {
        "body": "(troop_get_type,destination,trp_id),",
        "prefix": "troop_get_type",
        "scope": "python"
    },

    "troop_get_upgrade_troop": {
        "body": "(troop_get_upgrade_troop,destination,trp_id,upgrade_path),",
        "prefix": "troop_get_upgrade_troop",
        "scope": "python"
    },

    "troop_get_xp": {
        "body": "(troop_get_xp,destination,trp_id),",
        "prefix": "troop_get_xp",
        "scope": "python"
    },

    "troop_has_item_equipped": {
        "body": "(troop_has_item_equipped,trp_id,itm_id),",
        "prefix": "troop_has_item_equipped",
        "scope": "python"
    },

    "troop_inventory_slot_get_item_amount": {
        "body": "(troop_inventory_slot_get_item_amount,destination,trp_id,inventory_slot_no),",
        "prefix": "troop_inventory_slot_get_item_amount",
        "scope": "python"
    },

    "troop_inventory_slot_get_item_max_amount": {
        "body": "(troop_inventory_slot_get_item_max_amount,destination,trp_id,inventory_slot_no),",
        "prefix": "troop_inventory_slot_get_item_max_amount",
        "scope": "python"
    },

    "troop_inventory_slot_set_item_amount": {
        "body": "(troop_inventory_slot_set_item_amount,trp_id,inventory_slot_no,value),",
        "prefix": "troop_inventory_slot_set_item_amount",
        "scope": "python"
    },

    "troop_is_guarantee_horse": {
        "body": "(troop_is_guarantee_horse,trp_id),",
        "prefix": "troop_is_guarantee_horse",
        "scope": "python"
    },

    "troop_is_guarantee_ranged": {
        "body": "(troop_is_guarantee_ranged,trp_id),",
        "prefix": "troop_is_guarantee_ranged",
        "scope": "python"
    },

    "troop_is_hero": {
        "body": "(troop_is_hero,trp_id),",
        "prefix": "troop_is_hero",
        "scope": "python"
    },

    "troop_is_mounted": {
        "body": "(troop_is_mounted,trp_id),",
        "prefix": "troop_is_mounted",
        "scope": "python"
    },

    "troop_is_wounded": {
        "body": "(troop_is_wounded,trp_id),",
        "prefix": "troop_is_wounded",
        "scope": "python"
    },

    "troop_join": {
        "body": "(troop_join,trp_id),",
        "prefix": "troop_join",
        "scope": "python"
    },

    "troop_join_as_prisoner": {
        "body": "(troop_join_as_prisoner,trp_id),",
        "prefix": "troop_join_as_prisoner",
        "scope": "python"
    },

    "troop_loot_troop": {
        "body": "(troop_loot_troop,target_troop_id,source_troop_id,probability),",
        "prefix": "troop_loot_troop",
        "scope": "python"
    },

    "troop_raise_attribute": {
        "body": "(troop_raise_attribute,trp_id,ca_id,value),",
        "prefix": "troop_raise_attribute",
        "scope": "python"
    },

    "troop_raise_proficiency": {
        "body": "(troop_raise_proficiency,trp_id,wpt_id,value),",
        "prefix": "troop_raise_proficiency",
        "scope": "python"
    },

    "troop_raise_proficiency_linear": {
        "body": "(troop_raise_proficiency_linear,trp_id,wpt_id,value),",
        "prefix": "troop_raise_proficiency_linear",
        "scope": "python"
    },

    "troop_raise_skill": {
        "body": "(troop_raise_skill,trp_id,skl_id,value),",
        "prefix": "troop_raise_skill",
        "scope": "python"
    },

    "troop_remove_gold": {
        "body": "(troop_remove_gold,trp_id,value),",
        "prefix": "troop_remove_gold",
        "scope": "python"
    },

    "troop_remove_item": {
        "body": "(troop_remove_item,trp_id,itm_id),",
        "prefix": "troop_remove_item",
        "scope": "python"
    },

    "troop_remove_items": {
        "body": "(troop_remove_items,trp_id,itm_id,number),",
        "prefix": "troop_remove_items",
        "scope": "python"
    },

    "troop_set_age": {
        "body": "(troop_set_age,trp_id,age_slider_pos),",
        "prefix": "troop_set_age",
        "scope": "python"
    },

    "troop_set_auto_equip": {
        "body": "(troop_set_auto_equip,trp_id,value),",
        "prefix": "troop_set_auto_equip",
        "scope": "python"
    },

    "troop_set_class": {
        "body": "(troop_set_class,trp_id,value),",
        "prefix": "troop_set_class",
        "scope": "python"
    },

    "troop_set_face_keys": {
        "body": "(troop_set_face_keys,troop_no,string_no,[alt]),",
        "prefix": "troop_set_face_keys",
        "scope": "python"
    },

    "troop_set_face_key_from_current_profile": {
        "body": "(troop_set_face_key_from_current_profile,trp_id),",
        "prefix": "troop_set_face_key_from_current_profile",
        "scope": "python"
    },

    "troop_set_faction": {
        "body": "(troop_set_faction,trp_id,fac_id),",
        "prefix": "troop_set_faction",
        "scope": "python"
    },

    "troop_set_health": {
        "body": "(troop_set_health,trp_id,relativehealth(0-00)),",
        "prefix": "troop_set_health",
        "scope": "python"
    },

    "troop_set_inventory_slot": {
        "body": "(troop_set_inventory_slot,trp_id,inventory_slot_no,value),",
        "prefix": "troop_set_inventory_slot",
        "scope": "python"
    },

    "troop_set_inventory_slot_modifier": {
        "body": "(troop_set_inventory_slot_modifier,trp_id,inventory_slot_no,value),",
        "prefix": "troop_set_inventory_slot_modifier",
        "scope": "python"
    },

    "troop_set_name": {
        "body": "(troop_set_name,trp_id,str_id),",
        "prefix": "troop_set_name",
        "scope": "python"
    },

    "troop_set_note_available": {
        "body": "(troop_set_note_available,troop_id,value),",
        "prefix": "troop_set_note_available",
        "scope": "python"
    },

    "troop_set_plural_name": {
        "body": "(troop_set_plural_name,trp_id,str_id),",
        "prefix": "troop_set_plural_name",
        "scope": "python"
    },

    "troop_set_slot": {
        "body": "(troop_set_slot,troop_id,slot_no,value),",
        "prefix": "troop_set_slot",
        "scope": "python"
    },

    "troop_set_type": {
        "body": "(troop_set_type,trp_id,gender),",
        "prefix": "troop_set_type",
        "scope": "python"
    },

    "troop_slot_eq": {
        "body": "(troop_slot_eq,troop_id,slot_no,value),",
        "prefix": "troop_slot_eq",
        "scope": "python"
    },

    "troop_slot_ge": {
        "body": "(troop_slot_ge,troop_id,slot_no,value),",
        "prefix": "troop_slot_ge",
        "scope": "python"
    },

    "troop_sort_inventory": {
        "body": "(troop_sort_inventory,trp_id),",
        "prefix": "troop_sort_inventory",
        "scope": "python"
    },

    "try-else-end": {
        "body": "(try_begin),(try_end),",
        "prefix": "try-else-end",
        "scope": "python"
    },

    "try-end": {
        "body": "(try_begin),(try_end),",
        "prefix": "try-end",
        "scope": "python"
    },

    "try_end": {
        "body": "(try_end),",
        "prefix": "try_end",
        "scope": "python"
    },

    "try_for_agents": {
        "body": "(try_for_agents,agent_no),(try_end),",
        "prefix": "try_for_agents",
        "scope": "python"
    },

    "try_for_parties": {
        "body": "(try_for_parties,party_no),(try_end),",
        "prefix": "try_for_parties",
        "scope": "python"
    },

    "try_for_range": {
        "body": "(try_for_range,unused,_begin,_end),(try_end),",
        "prefix": "try_for_range",
        "scope": "python"
    },

    "try_for_range_backwards": {
        "body": "(try_for_range_backwards,unused,_begin,_end),(try_end),",
        "prefix": "try_for_range_backwards",
        "scope": "python"
    },

    "tutorial_message": {
        "body": "(tutorial_message,str_id,0xRRGGBB,auto_close_time),",
        "prefix": "tutorial_message",
        "scope": "python"
    },

    "tutorial_message_set_background": {
        "body": "(tutorial_message_set_background,value),",
        "prefix": "tutorial_message_set_background",
        "scope": "python"
    },

    "tutorial_message_set_center_justify": {
        "body": "(tutorial_message_set_center_justify,value),",
        "prefix": "tutorial_message_set_center_justify",
        "scope": "python"
    },

    "tutorial_message_set_position": {
        "body": "(tutorial_message_set_position,position_x,position_y),",
        "prefix": "tutorial_message_set_position",
        "scope": "python"
    },

    "tutorial_message_set_size": {
        "body": "(tutorial_message_set_size,size_x,size_y),",
        "prefix": "tutorial_message_set_size",
        "scope": "python"
    },

    "unlock_achievement": {
        "body": "(unlock_achievement,achievement_id),",
        "prefix": "unlock_achievement",
        "scope": "python"
    },

    "val_abs": {
        "body": "(val_abs,destination),",
        "prefix": "val_abs",
        "scope": "python"
    },

    "val_add": {
        "body": "(val_add,destination,value),",
        "prefix": "val_add",
        "scope": "python"
    },

    "val_and": {
        "body": "(val_and,destination,value),",
        "prefix": "val_and",
        "scope": "python"
    },

    "val_clamp": {
        "body": "(val_clamp,destination,lower_bound,upper_bound),",
        "prefix": "val_clamp",
        "scope": "python"
    },

    "val_div": {
        "body": "(val_div,destination,value),",
        "prefix": "val_div",
        "scope": "python"
    },

    "val_lshift": {
        "body": "(val_lshift,destination,value),",
        "prefix": "val_lshift",
        "scope": "python"
    },

    "val_max": {
        "body": "(val_max,destination,value),",
        "prefix": "val_max",
        "scope": "python"
    },

    "val_min": {
        "body": "(val_min,destination,value),",
        "prefix": "val_min",
        "scope": "python"
    },

    "val_mod": {
        "body": "(val_mod,destination,value),",
        "prefix": "val_mod",
        "scope": "python"
    },

    "val_mul": {
        "body": "(val_mul,destination,value),",
        "prefix": "val_mul",
        "scope": "python"
    },

    "val_or": {
        "body": "(val_or,destination,value),",
        "prefix": "val_or",
        "scope": "python"
    },

    "val_rshift": {
        "body": "(val_rshift,destination,value),",
        "prefix": "val_rshift",
        "scope": "python"
    },

    "val_sub": {
        "body": "(val_sub,destination,value),",
        "prefix": "val_sub",
        "scope": "python"
    },


}